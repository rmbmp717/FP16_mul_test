package fp16_mul

file_number 0 "fp16_mul.x"

fn __fp16_mul__check_special_values(exp: bits[5] id=1, frac: bits[10] id=2) -> (bits[1], bits[1]) {
  literal.3: bits[5] = literal(value=31, id=3, pos=[(0,39,25)])
  literal.5: bits[10] = literal(value=0, id=5, pos=[(0,39,50)])
  literal.8: bits[5] = literal(value=31, id=8, pos=[(0,40,25)])
  literal.10: bits[10] = literal(value=0, id=10, pos=[(0,40,50)])
  eq.4: bits[1] = eq(exp, literal.3, id=4, pos=[(0,39,18)])
  eq.6: bits[1] = eq(frac, literal.5, id=6, pos=[(0,39,42)])
  eq.9: bits[1] = eq(exp, literal.8, id=9, pos=[(0,40,18)])
  ne.11: bits[1] = ne(frac, literal.10, id=11, pos=[(0,40,42)])
  is_inf: bits[1] = and(eq.4, eq.6, id=7, pos=[(0,39,18)])
  is_nan: bits[1] = and(eq.9, ne.11, id=12, pos=[(0,40,18)])
  ret tuple.13: (bits[1], bits[1]) = tuple(is_inf, is_nan, id=13, pos=[(0,41,4)])
}

fn __fp16_mul__sel__1(cond: bits[1] id=14, a: bits[1] id=15, b: bits[1] id=16) -> bits[1] {
  literal.18: bits[1] = literal(value=1, id=18, pos=[(0,11,15)])
  eq.19: bits[1] = eq(cond, literal.18, id=19, pos=[(0,11,7)])
  N: bits[32] = literal(value=1, id=17, pos=[(0,10,11)])
  ret sel.20: bits[1] = sel(eq.19, cases=[b, a], id=20, pos=[(0,11,4)])
}

fn __fp16_mul__exp5_to_9(e: bits[5] id=21) -> bits[9] {
  literal.22: bits[4] = literal(value=0, id=22, pos=[(0,46,4)])
  ret concat.23: bits[9] = concat(literal.22, e, id=23, pos=[(0,46,4)])
}

fn __fp16_mul__u5_to_u8(x: bits[5] id=24) -> bits[8] {
  literal.25: bits[3] = literal(value=0, id=25, pos=[(0,22,4)])
  ret concat.26: bits[8] = concat(literal.25, x, id=26, pos=[(0,22,4)])
}

fn __fp16_mul__u11_to_u22(x: bits[11] id=27) -> bits[22] {
  literal.28: bits[11] = literal(value=0, id=28, pos=[(0,26,4)])
  ret concat.29: bits[22] = concat(literal.28, x, id=29, pos=[(0,26,4)])
}

fn __fp16_mul__sel__11(cond: bits[1] id=30, a: bits[11] id=31, b: bits[11] id=32) -> bits[11] {
  literal.34: bits[1] = literal(value=1, id=34, pos=[(0,11,15)])
  eq.35: bits[1] = eq(cond, literal.34, id=35, pos=[(0,11,7)])
  N: bits[32] = literal(value=11, id=33, pos=[(0,10,11)])
  ret sel.36: bits[11] = sel(eq.35, cases=[b, a], id=36, pos=[(0,11,4)])
}

fn __fp16_mul__sel__9(cond: bits[1] id=37, a: bits[9] id=38, b: bits[9] id=39) -> bits[9] {
  literal.41: bits[1] = literal(value=1, id=41, pos=[(0,11,15)])
  eq.42: bits[1] = eq(cond, literal.41, id=42, pos=[(0,11,7)])
  N: bits[32] = literal(value=9, id=40, pos=[(0,10,11)])
  ret sel.43: bits[9] = sel(eq.42, cases=[b, a], id=43, pos=[(0,11,4)])
}

fn __fp16_mul__sel__12(cond: bits[1] id=44, a: bits[12] id=45, b: bits[12] id=46) -> bits[12] {
  literal.48: bits[1] = literal(value=1, id=48, pos=[(0,11,15)])
  eq.49: bits[1] = eq(cond, literal.48, id=49, pos=[(0,11,7)])
  N: bits[32] = literal(value=12, id=47, pos=[(0,10,11)])
  ret sel.50: bits[12] = sel(eq.49, cases=[b, a], id=50, pos=[(0,11,4)])
}

fn __fp16_mul__is_exp_final_gte_31(exp_9: bits[9] id=51) -> bits[1] {
  sign: bits[1] = bit_slice(exp_9, start=8, width=1, id=52, pos=[(0,54,20)])
  literal.54: bits[1] = literal(value=0, id=54, pos=[(0,57,13)])
  magnitude: bits[8] = bit_slice(exp_9, start=0, width=8, id=53, pos=[(0,55,25)])
  literal.56: bits[8] = literal(value=31, id=56, pos=[(0,57,40)])
  eq.55: bits[1] = eq(sign, literal.54, id=55, pos=[(0,57,5)])
  uge.57: bits[1] = uge(magnitude, literal.56, id=57, pos=[(0,57,27)])
  ret and.58: bits[1] = and(eq.55, uge.57, id=58, pos=[(0,57,5)])
}

fn __fp16_mul__is_exp_final_lt_1(exp_9: bits[9] id=59) -> bits[1] {
  sign: bits[1] = bit_slice(exp_9, start=8, width=1, id=60, pos=[(0,62,20)])
  literal.62: bits[1] = literal(value=1, id=62, pos=[(0,66,13)])
  magnitude: bits[8] = bit_slice(exp_9, start=0, width=8, id=61, pos=[(0,63,25)])
  literal.64: bits[8] = literal(value=1, id=64, pos=[(0,66,39)])
  eq.63: bits[1] = eq(sign, literal.62, id=63, pos=[(0,66,5)])
  ult.65: bits[1] = ult(magnitude, literal.64, id=65, pos=[(0,66,27)])
  ret or.66: bits[1] = or(eq.63, ult.65, id=66, pos=[(0,66,5)])
}

fn __fp16_mul__fp16_multiply(a: bits[16] id=67, b: bits[16] id=68) -> bits[16] {
  exp_a: bits[5] = bit_slice(a, start=10, width=5, id=70, pos=[(0,76,17)])
  literal.100: bits[5] = literal(value=0, id=100, pos=[(0,103,33)])
  exp_b: bits[5] = bit_slice(b, start=10, width=5, id=71, pos=[(0,77,17)])
  literal.105: bits[5] = literal(value=0, id=105, pos=[(0,104,33)])
  eq.101: bits[1] = eq(exp_a, literal.100, id=101, pos=[(0,103,24)])
  literal.102: bits[1] = literal(value=0, id=102, pos=[(0,103,44)])
  literal.103: bits[1] = literal(value=1, id=103, pos=[(0,103,55)])
  eq.106: bits[1] = eq(exp_b, literal.105, id=106, pos=[(0,104,24)])
  literal.107: bits[1] = literal(value=0, id=107, pos=[(0,104,44)])
  literal.108: bits[1] = literal(value=1, id=108, pos=[(0,104,55)])
  leading_a: bits[1] = invoke(eq.101, literal.102, literal.103, to_apply=__fp16_mul__sel__1, id=104, pos=[(0,103,23)])
  frac_a_raw: bits[10] = bit_slice(a, start=0, width=10, id=72, pos=[(0,78,22)])
  leading_b: bits[1] = invoke(eq.106, literal.107, literal.108, to_apply=__fp16_mul__sel__1, id=109, pos=[(0,104,23)])
  frac_b_raw: bits[10] = bit_slice(b, start=0, width=10, id=73, pos=[(0,79,22)])
  frac_a: bits[11] = concat(leading_a, frac_a_raw, id=110, pos=[(0,105,17)])
  frac_b: bits[11] = concat(leading_b, frac_b_raw, id=111, pos=[(0,106,17)])
  invoke.125: bits[22] = invoke(frac_a, to_apply=__fp16_mul__u11_to_u22, id=125, pos=[(0,126,30)])
  invoke.126: bits[22] = invoke(frac_b, to_apply=__fp16_mul__u11_to_u22, id=126, pos=[(0,126,51)])
  frac_mult: bits[22] = umul(invoke.125, invoke.126, id=127, pos=[(0,126,30)])
  leading_bit: bits[1] = bit_slice(frac_mult, start=21, width=1, id=129, pos=[(0,132,31)])
  literal.146: bits[1] = literal(value=1, id=146, pos=[(0,144,39)])
  literal.141: bits[1] = literal(value=1, id=141, pos=[(0,143,39)])
  eq.147: bits[1] = eq(leading_bit, literal.146, id=147, pos=[(0,144,24)])
  bit_slice.148: bits[1] = bit_slice(frac_mult, start=9, width=1, id=148, pos=[(0,144,59)])
  bit_slice.149: bits[1] = bit_slice(frac_mult, start=8, width=1, id=149, pos=[(0,144,76)])
  eq.142: bits[1] = eq(leading_bit, literal.141, id=142, pos=[(0,143,24)])
  bit_slice.143: bits[1] = bit_slice(frac_mult, start=10, width=1, id=143, pos=[(0,143,59)])
  bit_slice.144: bits[1] = bit_slice(frac_mult, start=9, width=1, id=144, pos=[(0,143,77)])
  round_bit: bits[1] = invoke(eq.147, bit_slice.148, bit_slice.149, to_apply=__fp16_mul__sel__1, id=150, pos=[(0,144,23)])
  bit_slice.151: bits[8] = bit_slice(frac_mult, start=0, width=8, id=151, pos=[(0,145,30)])
  literal.152: bits[8] = literal(value=0, id=152, pos=[(0,145,39)])
  literal.130: bits[1] = literal(value=1, id=130, pos=[(0,134,43)])
  guard_bit: bits[1] = invoke(eq.142, bit_slice.143, bit_slice.144, to_apply=__fp16_mul__sel__1, id=145, pos=[(0,143,23)])
  not.160: bits[1] = not(round_bit, id=160, pos=[(0,157,39)])
  sticky_bit: bits[1] = ne(bit_slice.151, literal.152, id=153, pos=[(0,145,30)])
  eq.131: bits[1] = eq(leading_bit, literal.130, id=131, pos=[(0,134,28)])
  bit_slice.132: bits[11] = bit_slice(frac_mult, start=11, width=11, id=132, pos=[(0,135,37)])
  bit_slice.133: bits[11] = bit_slice(frac_mult, start=10, width=11, id=133, pos=[(0,136,37)])
  and.161: bits[1] = and(guard_bit, not.160, id=161, pos=[(0,157,27)])
  not.162: bits[1] = not(sticky_bit, id=162, pos=[(0,157,52)])
  frac_adjusted: bits[11] = invoke(eq.131, bit_slice.132, bit_slice.133, to_apply=__fp16_mul__sel__11, id=134, pos=[(0,134,27)])
  or.158: bits[1] = or(round_bit, sticky_bit, id=158, pos=[(0,156,40)])
  and.163: bits[1] = and(and.161, not.162, id=163, pos=[(0,157,27)])
  bit_slice.164: bits[1] = bit_slice(frac_adjusted, start=0, width=1, id=164, pos=[(0,157,79)])
  and.159: bits[1] = and(guard_bit, or.158, id=159, pos=[(0,156,27)])
  and.165: bits[1] = and(and.163, bit_slice.164, id=165, pos=[(0,157,27)])
  literal.167: bits[1] = literal(value=0, id=167, pos=[(0,160,27)])
  round_condition: bits[1] = or(and.159, and.165, id=166, pos=[(0,156,27)])
  literal.169: bits[12] = literal(value=1, id=169, pos=[(0,161,38)])
  literal.170: bits[12] = literal(value=0, id=170, pos=[(0,161,50)])
  frac_adjusted_12: bits[12] = concat(literal.167, frac_adjusted, id=168, pos=[(0,160,27)])
  one_12: bits[12] = invoke(round_condition, literal.169, literal.170, to_apply=__fp16_mul__sel__12, id=171, pos=[(0,161,20)])
  exp_a_9: bits[9] = invoke(exp_a, to_apply=__fp16_mul__exp5_to_9, id=115, pos=[(0,117,27)])
  exp_b_9: bits[9] = invoke(exp_b, to_apply=__fp16_mul__exp5_to_9, id=116, pos=[(0,118,27)])
  literal.135: bits[1] = literal(value=1, id=135, pos=[(0,138,56)])
  frac_no_of_12: bits[12] = add(frac_adjusted_12, one_12, id=172, pos=[(0,162,28)])
  literal.173: bits[12] = literal(value=2048, id=173, pos=[(0,165,39)])
  add.117: bits[9] = add(exp_a_9, exp_b_9, id=117, pos=[(0,119,21)])
  BIAS_9: bits[9] = literal(value=15, id=69, pos=[(0,50,15)])
  eq.136: bits[1] = eq(leading_bit, literal.135, id=136, pos=[(0,138,41)])
  literal.137: bits[9] = literal(value=1, id=137, pos=[(0,139,41)])
  literal.138: bits[9] = literal(value=0, id=138, pos=[(0,140,41)])
  cond_of: bits[1] = uge(frac_no_of_12, literal.173, id=174, pos=[(0,165,18)])
  literal.175: bits[1] = literal(value=1, id=175, pos=[(0,166,36)])
  literal.176: bits[1] = literal(value=0, id=176, pos=[(0,166,47)])
  literal.181: bits[12] = literal(value=1, id=181, pos=[(0,174,50)])
  exp_sum_9: bits[9] = sub(add.117, BIAS_9, id=118, pos=[(0,119,21)])
  invoke.139: bits[9] = invoke(eq.136, literal.137, literal.138, to_apply=__fp16_mul__sel__9, id=139, pos=[(0,138,40)])
  literal.178: bits[8] = literal(value=0, id=178, pos=[(0,169,25)])
  overflow_bit: bits[1] = invoke(cond_of, literal.175, literal.176, to_apply=__fp16_mul__sel__1, id=177, pos=[(0,166,26)])
  literal.185: bits[1] = literal(value=1, id=185, pos=[(0,178,44)])
  frac_of_shifted_12: bits[12] = shrl(frac_no_of_12, literal.181, id=182, pos=[(0,174,29)])
  exp_adjusted_9: bits[9] = add(exp_sum_9, invoke.139, id=140, pos=[(0,138,25)])
  overflow_bit_9: bits[9] = concat(literal.178, overflow_bit, id=179, pos=[(0,169,25)])
  eq.186: bits[1] = eq(overflow_bit, literal.185, id=186, pos=[(0,178,28)])
  frac_of_shifted_11: bits[11] = bit_slice(frac_of_shifted_12, start=0, width=11, id=184, pos=[(0,177,47)])
  frac_no_of_11: bits[11] = bit_slice(frac_no_of_12, start=0, width=11, id=183, pos=[(0,176,37)])
  literal.213: bits[9] = literal(value=1, id=213, pos=[(0,207,18)])
  exp_final_9: bits[9] = add(exp_adjusted_9, overflow_bit_9, id=180, pos=[(0,170,22)])
  literal.217: bits[21] = literal(value=0, id=217, pos=[(0,209,24)])
  frac_final_11: bits[11] = invoke(eq.186, frac_of_shifted_11, frac_no_of_11, to_apply=__fp16_mul__sel__11, id=187, pos=[(0,178,27)])
  literal.215: bits[23] = literal(value=0, id=215, pos=[(0,208,19)])
  shift_9: bits[9] = sub(literal.213, exp_final_9, id=214, pos=[(0,207,18)])
  literal.198: bits[5] = literal(value=31, id=198, pos=[(0,194,33)])
  literal.200: bits[10] = literal(value=0, id=200, pos=[(0,194,64)])
  literal.203: bits[5] = literal(value=31, id=203, pos=[(0,195,33)])
  literal.205: bits[10] = literal(value=0, id=205, pos=[(0,195,64)])
  sign_a: bits[1] = bit_slice(a, start=15, width=1, id=74, pos=[(0,80,18)])
  sign_b: bits[1] = bit_slice(b, start=15, width=1, id=75, pos=[(0,81,18)])
  frac_final_32: bits[32] = concat(literal.217, frac_final_11, id=218, pos=[(0,209,24)])
  shift_32: bits[32] = concat(literal.215, shift_9, id=216, pos=[(0,208,19)])
  literal.95: bits[5] = literal(value=0, id=95, pos=[(0,98,30)])
  literal.97: bits[10] = literal(value=0, id=97, pos=[(0,98,58)])
  eq.199: bits[1] = eq(exp_a, literal.198, id=199, pos=[(0,194,24)])
  eq.201: bits[1] = eq(frac_a_raw, literal.200, id=201, pos=[(0,194,50)])
  eq.204: bits[1] = eq(exp_b, literal.203, id=204, pos=[(0,195,24)])
  eq.206: bits[1] = eq(frac_b_raw, literal.205, id=206, pos=[(0,195,50)])
  sign_result: bits[1] = xor(sign_a, sign_b, id=114, pos=[(0,114,22)])
  exp_out_5: bits[5] = bit_slice(exp_final_9, start=0, width=5, id=241, pos=[(0,235,35)])
  literal.237: bits[5] = literal(value=0, id=237, pos=[(0,231,24)])
  frac_subnormal_32: bits[32] = shrl(frac_final_32, shift_32, id=219, pos=[(0,210,28)])
  invoke.84: (bits[1], bits[1]) = invoke(exp_a, frac_a_raw, to_apply=__fp16_mul__check_special_values, id=84, pos=[(0,95,51)])
  invoke.87: (bits[1], bits[1]) = invoke(exp_b, frac_b_raw, to_apply=__fp16_mul__check_special_values, id=87, pos=[(0,96,51)])
  eq.96: bits[1] = eq(exp_b, literal.95, id=96, pos=[(0,98,21)])
  eq.98: bits[1] = eq(frac_b_raw, literal.97, id=98, pos=[(0,98,44)])
  literal.90: bits[5] = literal(value=0, id=90, pos=[(0,97,30)])
  literal.92: bits[10] = literal(value=0, id=92, pos=[(0,97,58)])
  is_inf_a_chk: bits[1] = and(eq.199, eq.201, id=202, pos=[(0,194,24)])
  is_inf_b_chk: bits[1] = and(eq.204, eq.206, id=207, pos=[(0,195,24)])
  concat.245: bits[6] = concat(sign_result, exp_out_5, id=245, pos=[(0,240,9)])
  frac_out_10: bits[10] = bit_slice(frac_final_11, start=0, width=10, id=242, pos=[(0,236,39)])
  concat.238: bits[6] = concat(sign_result, literal.237, id=238, pos=[(0,231,9)])
  frac_subnormal: bits[10] = bit_slice(frac_subnormal_32, start=0, width=10, id=220, pos=[(0,211,42)])
  literal.232: bits[5] = literal(value=31, id=232, pos=[(0,228,24)])
  is_nan_a: bits[1] = tuple_index(invoke.84, index=1, id=86, pos=[(0,95,19)])
  is_nan_b: bits[1] = tuple_index(invoke.87, index=1, id=89, pos=[(0,96,19)])
  is_inf_a: bits[1] = tuple_index(invoke.84, index=0, id=85, pos=[(0,95,9)])
  is_zero_b: bits[1] = and(eq.96, eq.98, id=99, pos=[(0,98,21)])
  eq.91: bits[1] = eq(exp_a, literal.90, id=91, pos=[(0,97,21)])
  eq.93: bits[1] = eq(frac_a_raw, literal.92, id=93, pos=[(0,97,44)])
  or.208: bits[1] = or(is_inf_a_chk, is_inf_b_chk, id=208, pos=[(0,196,24)])
  invoke.209: bits[1] = invoke(exp_final_9, to_apply=__fp16_mul__is_exp_final_gte_31, id=209, pos=[(0,198,45)])
  is_subnormal: bits[1] = invoke(exp_final_9, to_apply=__fp16_mul__is_exp_final_lt_1, id=212, pos=[(0,204,40)])
  concat.246: bits[16] = concat(concat.245, frac_out_10, id=246, pos=[(0,240,9)])
  concat.239: bits[16] = concat(concat.238, frac_subnormal, id=239, pos=[(0,231,9)])
  concat.233: bits[6] = concat(sign_result, literal.232, id=233, pos=[(0,228,9)])
  literal.234: bits[10] = literal(value=0, id=234, pos=[(0,228,41)])
  literal.227: bits[5] = literal(value=0, id=227, pos=[(0,225,24)])
  invoke.119: bits[8] = invoke(exp_a, to_apply=__fp16_mul__u5_to_u8, id=119, pos=[(0,122,27)])
  invoke.120: bits[8] = invoke(exp_b, to_apply=__fp16_mul__u5_to_u8, id=120, pos=[(0,122,45)])
  or.193: bits[1] = or(is_nan_a, is_nan_b, id=193, pos=[(0,191,24)])
  and.194: bits[1] = and(is_inf_a, is_zero_b, id=194, pos=[(0,191,47)])
  is_zero_a: bits[1] = and(eq.91, eq.93, id=94, pos=[(0,97,21)])
  is_inf_b: bits[1] = tuple_index(invoke.87, index=0, id=88, pos=[(0,96,9)])
  is_inf_result: bits[1] = or(or.208, invoke.209, id=210, pos=[(0,196,24)])
  sel.247: bits[16] = sel(is_subnormal, cases=[concat.246, concat.239], id=247, pos=[(0,229,11)])
  concat.235: bits[16] = concat(concat.233, literal.234, id=235, pos=[(0,228,9)])
  concat.228: bits[6] = concat(sign_result, literal.227, id=228, pos=[(0,225,9)])
  literal.229: bits[10] = literal(value=0, id=229, pos=[(0,225,38)])
  add.121: bits[8] = add(invoke.119, invoke.120, id=121, pos=[(0,122,27)])
  literal.122: bits[8] = literal(value=15, id=122, pos=[(0,122,56)])
  or.195: bits[1] = or(or.193, and.194, id=195, pos=[(0,191,24)])
  and.196: bits[1] = and(is_zero_a, is_inf_b, id=196, pos=[(0,191,72)])
  is_zero_result: bits[1] = or(is_zero_a, is_zero_b, id=211, pos=[(0,201,25)])
  sel.248: bits[16] = sel(is_inf_result, cases=[sel.247, concat.235], id=248, pos=[(0,226,11)])
  concat.230: bits[16] = concat(concat.228, literal.229, id=230, pos=[(0,225,9)])
  exp_sum: bits[8] = sub(add.121, literal.122, id=123, pos=[(0,122,27)])
  is_nan_result: bits[1] = or(or.195, and.196, id=197, pos=[(0,191,24)])
  sel.249: bits[16] = sel(is_zero_result, cases=[sel.248, concat.230], id=249, pos=[(0,223,11)])
  literal.225: bits[16] = literal(value=32256, id=225, pos=[(0,222,8)])
  identity.76: bits[16] = identity(a, id=76, pos=[(0,83,10)])
  identity.77: bits[16] = identity(b, id=77, pos=[(0,84,10)])
  identity.78: bits[5] = identity(exp_a, id=78, pos=[(0,85,10)])
  identity.79: bits[5] = identity(exp_b, id=79, pos=[(0,86,10)])
  identity.80: bits[10] = identity(frac_a_raw, id=80, pos=[(0,87,10)])
  identity.81: bits[10] = identity(frac_b_raw, id=81, pos=[(0,88,10)])
  identity.82: bits[1] = identity(sign_a, id=82, pos=[(0,89,10)])
  identity.83: bits[1] = identity(sign_b, id=83, pos=[(0,90,10)])
  identity.112: bits[11] = identity(frac_a, id=112, pos=[(0,108,10)])
  identity.113: bits[11] = identity(frac_b, id=113, pos=[(0,109,10)])
  identity.124: bits[8] = identity(exp_sum, id=124, pos=[(0,123,10)])
  identity.128: bits[22] = identity(frac_mult, id=128, pos=[(0,127,10)])
  identity.154: bits[1] = identity(leading_bit, id=154, pos=[(0,147,10)])
  identity.155: bits[11] = identity(frac_adjusted, id=155, pos=[(0,148,10)])
  identity.156: bits[1] = identity(round_bit, id=156, pos=[(0,149,10)])
  identity.157: bits[1] = identity(sticky_bit, id=157, pos=[(0,150,10)])
  identity.188: bits[9] = identity(exp_final_9, id=188, pos=[(0,182,10)])
  identity.189: bits[11] = identity(frac_adjusted, id=189, pos=[(0,183,10)])
  identity.190: bits[1] = identity(round_condition, id=190, pos=[(0,184,10)])
  identity.191: bits[12] = identity(frac_no_of_12, id=191, pos=[(0,185,10)])
  identity.192: bits[11] = identity(frac_final_11, id=192, pos=[(0,186,10)])
  identity.221: bits[1] = identity(is_inf_result, id=221, pos=[(0,213,10)])
  identity.222: bits[1] = identity(is_zero_result, id=222, pos=[(0,214,10)])
  identity.223: bits[10] = identity(frac_subnormal, id=223, pos=[(0,215,10)])
  identity.224: bits[1] = identity(is_nan_result, id=224, pos=[(0,221,14)])
  identity.226: bits[1] = identity(is_zero_result, id=226, pos=[(0,224,14)])
  identity.231: bits[1] = identity(is_inf_result, id=231, pos=[(0,227,14)])
  identity.236: bits[9] = identity(exp_final_9, id=236, pos=[(0,230,14)])
  identity.240: bits[1] = identity(sign_result, id=240, pos=[(0,234,14)])
  identity.243: bits[5] = identity(exp_out_5, id=243, pos=[(0,237,14)])
  identity.244: bits[10] = identity(frac_out_10, id=244, pos=[(0,238,14)])
  ret result: bits[16] = sel(is_nan_result, cases=[sel.249, literal.225], id=250, pos=[(0,220,17)])
}

top fn __fp16_mul__fp16_multiplier(a: bits[16] id=251, b: bits[16] id=252) -> bits[16] {
  ret invoke.253: bits[16] = invoke(a, b, to_apply=__fp16_mul__fp16_multiply, id=253, pos=[(0,247,17)])
}
