package fp16_mul

file_number 0 "fp16_mul.x"

fn __fp16_mul__check_special_values(exp: bits[5] id=1, frac: bits[10] id=2) -> (bits[1], bits[1]) {
  literal.3: bits[5] = literal(value=31, id=3, pos=[(0,37,25)])
  literal.5: bits[10] = literal(value=0, id=5, pos=[(0,37,50)])
  literal.8: bits[5] = literal(value=31, id=8, pos=[(0,38,25)])
  literal.10: bits[10] = literal(value=0, id=10, pos=[(0,38,50)])
  eq.4: bits[1] = eq(exp, literal.3, id=4, pos=[(0,37,18)])
  eq.6: bits[1] = eq(frac, literal.5, id=6, pos=[(0,37,42)])
  eq.9: bits[1] = eq(exp, literal.8, id=9, pos=[(0,38,18)])
  ne.11: bits[1] = ne(frac, literal.10, id=11, pos=[(0,38,42)])
  is_inf: bits[1] = and(eq.4, eq.6, id=7, pos=[(0,37,18)])
  is_nan: bits[1] = and(eq.9, ne.11, id=12, pos=[(0,38,18)])
  ret tuple.13: (bits[1], bits[1]) = tuple(is_inf, is_nan, id=13, pos=[(0,39,4)])
}

fn __fp16_mul__sel__1(cond: bits[1] id=14, a: bits[1] id=15, b: bits[1] id=16) -> bits[1] {
  literal.18: bits[1] = literal(value=1, id=18, pos=[(0,11,15)])
  eq.19: bits[1] = eq(cond, literal.18, id=19, pos=[(0,11,7)])
  N: bits[32] = literal(value=1, id=17, pos=[(0,10,11)])
  ret sel.20: bits[1] = sel(eq.19, cases=[b, a], id=20, pos=[(0,11,4)])
}

fn __fp16_mul__u5_to_u8(x: bits[5] id=21) -> bits[8] {
  literal.22: bits[3] = literal(value=0, id=22, pos=[(0,20,4)])
  ret concat.23: bits[8] = concat(literal.22, x, id=23, pos=[(0,20,4)])
}

fn __fp16_mul__u11_to_u22(x: bits[11] id=24) -> bits[22] {
  literal.25: bits[11] = literal(value=0, id=25, pos=[(0,24,4)])
  ret concat.26: bits[22] = concat(literal.25, x, id=26, pos=[(0,24,4)])
}

fn __fp16_mul__sel__11(cond: bits[1] id=27, a: bits[11] id=28, b: bits[11] id=29) -> bits[11] {
  literal.31: bits[1] = literal(value=1, id=31, pos=[(0,11,15)])
  eq.32: bits[1] = eq(cond, literal.31, id=32, pos=[(0,11,7)])
  N: bits[32] = literal(value=11, id=30, pos=[(0,10,11)])
  ret sel.33: bits[11] = sel(eq.32, cases=[b, a], id=33, pos=[(0,11,4)])
}

fn __fp16_mul__sel__8(cond: bits[1] id=34, a: bits[8] id=35, b: bits[8] id=36) -> bits[8] {
  literal.38: bits[1] = literal(value=1, id=38, pos=[(0,11,15)])
  eq.39: bits[1] = eq(cond, literal.38, id=39, pos=[(0,11,7)])
  N: bits[32] = literal(value=8, id=37, pos=[(0,10,11)])
  ret sel.40: bits[8] = sel(eq.39, cases=[b, a], id=40, pos=[(0,11,4)])
}

fn __fp16_mul__u11_to_u32(x: bits[11] id=41) -> bits[32] {
  literal.42: bits[21] = literal(value=0, id=42, pos=[(0,28,4)])
  ret concat.43: bits[32] = concat(literal.42, x, id=43, pos=[(0,28,4)])
}

fn __fp16_mul__u8_to_u32(x: bits[8] id=44) -> bits[32] {
  literal.45: bits[24] = literal(value=0, id=45, pos=[(0,32,4)])
  ret concat.46: bits[32] = concat(literal.45, x, id=46, pos=[(0,32,4)])
}

fn __fp16_mul__fp16_multiply(a: bits[16] id=47, b: bits[16] id=48) -> bits[16] {
  exp_a: bits[5] = bit_slice(a, start=10, width=5, id=49, pos=[(0,47,17)])
  literal.71: bits[5] = literal(value=0, id=71, pos=[(0,65,33)])
  exp_b: bits[5] = bit_slice(b, start=10, width=5, id=50, pos=[(0,48,17)])
  literal.76: bits[5] = literal(value=0, id=76, pos=[(0,66,33)])
  eq.72: bits[1] = eq(exp_a, literal.71, id=72, pos=[(0,65,24)])
  literal.73: bits[1] = literal(value=0, id=73, pos=[(0,65,44)])
  literal.74: bits[1] = literal(value=1, id=74, pos=[(0,65,55)])
  eq.77: bits[1] = eq(exp_b, literal.76, id=77, pos=[(0,66,24)])
  literal.78: bits[1] = literal(value=0, id=78, pos=[(0,66,44)])
  literal.79: bits[1] = literal(value=1, id=79, pos=[(0,66,55)])
  leading_a: bits[1] = invoke(eq.72, literal.73, literal.74, to_apply=__fp16_mul__sel__1, id=75, pos=[(0,65,23)])
  frac_a_raw: bits[10] = bit_slice(a, start=0, width=10, id=51, pos=[(0,49,32)])
  leading_b: bits[1] = invoke(eq.77, literal.78, literal.79, to_apply=__fp16_mul__sel__1, id=80, pos=[(0,66,23)])
  frac_b_raw: bits[10] = bit_slice(b, start=0, width=10, id=52, pos=[(0,50,32)])
  frac_a: bits[11] = concat(leading_a, frac_a_raw, id=81, pos=[(0,67,17)])
  frac_b: bits[11] = concat(leading_b, frac_b_raw, id=82, pos=[(0,68,17)])
  invoke.89: bits[22] = invoke(frac_a, to_apply=__fp16_mul__u11_to_u22, id=89, pos=[(0,75,30)])
  invoke.90: bits[22] = invoke(frac_b, to_apply=__fp16_mul__u11_to_u22, id=90, pos=[(0,75,51)])
  frac_mult: bits[22] = umul(invoke.89, invoke.90, id=91, pos=[(0,75,30)])
  leading_bit: bits[1] = bit_slice(frac_mult, start=21, width=1, id=92, pos=[(0,80,40)])
  literal.109: bits[1] = literal(value=1, id=109, pos=[(0,85,39)])
  literal.104: bits[1] = literal(value=1, id=104, pos=[(0,84,39)])
  eq.110: bits[1] = eq(leading_bit, literal.109, id=110, pos=[(0,85,24)])
  bit_slice.111: bits[1] = bit_slice(frac_mult, start=9, width=1, id=111, pos=[(0,85,59)])
  bit_slice.112: bits[1] = bit_slice(frac_mult, start=8, width=1, id=112, pos=[(0,85,76)])
  eq.105: bits[1] = eq(leading_bit, literal.104, id=105, pos=[(0,84,24)])
  bit_slice.106: bits[1] = bit_slice(frac_mult, start=10, width=1, id=106, pos=[(0,84,59)])
  bit_slice.107: bits[1] = bit_slice(frac_mult, start=9, width=1, id=107, pos=[(0,84,77)])
  round_bit: bits[1] = invoke(eq.110, bit_slice.111, bit_slice.112, to_apply=__fp16_mul__sel__1, id=113, pos=[(0,85,23)])
  bit_slice.114: bits[9] = bit_slice(frac_mult, start=0, width=9, id=114, pos=[(0,86,30)])
  literal.115: bits[9] = literal(value=0, id=115, pos=[(0,86,39)])
  literal.93: bits[1] = literal(value=1, id=93, pos=[(0,81,43)])
  guard_bit: bits[1] = invoke(eq.105, bit_slice.106, bit_slice.107, to_apply=__fp16_mul__sel__1, id=108, pos=[(0,84,23)])
  not.119: bits[1] = not(round_bit, id=119, pos=[(0,90,39)])
  sticky_bit: bits[1] = ne(bit_slice.114, literal.115, id=116, pos=[(0,86,30)])
  eq.94: bits[1] = eq(leading_bit, literal.93, id=94, pos=[(0,81,28)])
  bit_slice.95: bits[11] = bit_slice(frac_mult, start=11, width=11, id=95, pos=[(0,81,63)])
  bit_slice.96: bits[11] = bit_slice(frac_mult, start=10, width=11, id=96, pos=[(0,81,81)])
  and.120: bits[1] = and(guard_bit, not.119, id=120, pos=[(0,90,27)])
  not.121: bits[1] = not(sticky_bit, id=121, pos=[(0,90,52)])
  frac_adjusted: bits[11] = invoke(eq.94, bit_slice.95, bit_slice.96, to_apply=__fp16_mul__sel__11, id=97, pos=[(0,81,27)])
  or.117: bits[1] = or(round_bit, sticky_bit, id=117, pos=[(0,89,40)])
  and.122: bits[1] = and(and.120, not.121, id=122, pos=[(0,90,27)])
  bit_slice.123: bits[1] = bit_slice(frac_adjusted, start=0, width=1, id=123, pos=[(0,90,79)])
  and.118: bits[1] = and(guard_bit, or.117, id=118, pos=[(0,89,27)])
  and.124: bits[1] = and(and.122, bit_slice.123, id=124, pos=[(0,90,27)])
  literal.126: bits[11] = literal(value=1, id=126, pos=[(0,92,58)])
  invoke.84: bits[8] = invoke(exp_a, to_apply=__fp16_mul__u5_to_u8, id=84, pos=[(0,74,26)])
  invoke.85: bits[8] = invoke(exp_b, to_apply=__fp16_mul__u5_to_u8, id=85, pos=[(0,74,44)])
  literal.98: bits[1] = literal(value=1, id=98, pos=[(0,82,52)])
  round_condition: bits[1] = or(and.118, and.124, id=125, pos=[(0,89,27)])
  add.127: bits[11] = add(frac_adjusted, literal.126, id=127, pos=[(0,92,42)])
  add.86: bits[8] = add(invoke.84, invoke.85, id=86, pos=[(0,74,26)])
  literal.87: bits[8] = literal(value=15, id=87, pos=[(0,74,54)])
  eq.99: bits[1] = eq(leading_bit, literal.98, id=99, pos=[(0,82,37)])
  literal.100: bits[8] = literal(value=1, id=100, pos=[(0,82,63)])
  literal.101: bits[8] = literal(value=0, id=101, pos=[(0,82,74)])
  frac_final: bits[11] = invoke(round_condition, add.127, frac_adjusted, to_apply=__fp16_mul__sel__11, id=128, pos=[(0,92,24)])
  literal.129: bits[11] = literal(value=2047, id=129, pos=[(0,93,53)])
  exp_sum: bits[8] = sub(add.86, literal.87, id=88, pos=[(0,74,26)])
  invoke.102: bits[8] = invoke(eq.99, literal.100, literal.101, to_apply=__fp16_mul__sel__8, id=102, pos=[(0,82,36)])
  eq.130: bits[1] = eq(frac_final, literal.129, id=130, pos=[(0,93,39)])
  literal.131: bits[8] = literal(value=1, id=131, pos=[(0,93,69)])
  literal.132: bits[8] = literal(value=0, id=132, pos=[(0,93,80)])
  exp_adjusted: bits[8] = add(exp_sum, invoke.102, id=103, pos=[(0,82,23)])
  invoke.133: bits[8] = invoke(eq.130, literal.131, literal.132, to_apply=__fp16_mul__sel__8, id=133, pos=[(0,93,38)])
  literal.156: bits[8] = literal(value=1, id=156, pos=[(0,104,72)])
  exp_final: bits[8] = add(exp_adjusted, invoke.133, id=134, pos=[(0,93,20)])
  sub.157: bits[8] = sub(literal.156, exp_final, id=157, pos=[(0,104,72)])
  sign_a: bits[1] = bit_slice(a, start=15, width=1, id=53, pos=[(0,51,27)])
  sign_b: bits[1] = bit_slice(b, start=15, width=1, id=54, pos=[(0,52,27)])
  invoke.155: bits[32] = invoke(frac_final, to_apply=__fp16_mul__u11_to_u32, id=155, pos=[(0,104,46)])
  invoke.158: bits[32] = invoke(sub.157, to_apply=__fp16_mul__u8_to_u32, id=158, pos=[(0,104,71)])
  literal.66: bits[5] = literal(value=0, id=66, pos=[(0,60,30)])
  literal.68: bits[10] = literal(value=0, id=68, pos=[(0,60,58)])
  literal.140: bits[5] = literal(value=31, id=140, pos=[(0,99,29)])
  literal.142: bits[10] = literal(value=0, id=142, pos=[(0,99,60)])
  literal.145: bits[5] = literal(value=31, id=145, pos=[(0,100,29)])
  literal.147: bits[10] = literal(value=0, id=147, pos=[(0,100,60)])
  literal.61: bits[5] = literal(value=0, id=61, pos=[(0,59,30)])
  literal.63: bits[10] = literal(value=0, id=63, pos=[(0,59,58)])
  sign_result: bits[1] = xor(sign_a, sign_b, id=83, pos=[(0,73,22)])
  bit_slice.175: bits[5] = bit_slice(exp_final, start=0, width=5, id=175, pos=[(0,118,67)])
  literal.172: bits[5] = literal(value=0, id=172, pos=[(0,116,24)])
  shrl.159: bits[32] = shrl(invoke.155, invoke.158, id=159, pos=[(0,104,46)])
  invoke.55: (bits[1], bits[1]) = invoke(exp_a, frac_a_raw, to_apply=__fp16_mul__check_special_values, id=55, pos=[(0,57,51)])
  invoke.58: (bits[1], bits[1]) = invoke(exp_b, frac_b_raw, to_apply=__fp16_mul__check_special_values, id=58, pos=[(0,58,51)])
  eq.67: bits[1] = eq(exp_b, literal.66, id=67, pos=[(0,60,21)])
  eq.69: bits[1] = eq(frac_b_raw, literal.68, id=69, pos=[(0,60,44)])
  eq.141: bits[1] = eq(exp_a, literal.140, id=141, pos=[(0,99,20)])
  eq.143: bits[1] = eq(frac_a_raw, literal.142, id=143, pos=[(0,99,46)])
  eq.146: bits[1] = eq(exp_b, literal.145, id=146, pos=[(0,100,20)])
  eq.148: bits[1] = eq(frac_b_raw, literal.147, id=148, pos=[(0,100,46)])
  eq.62: bits[1] = eq(exp_a, literal.61, id=62, pos=[(0,59,21)])
  eq.64: bits[1] = eq(frac_a_raw, literal.63, id=64, pos=[(0,59,44)])
  literal.170: bits[8] = literal(value=0, id=170, pos=[(0,115,27)])
  concat.176: bits[6] = concat(sign_result, bit_slice.175, id=176, pos=[(0,118,43)])
  bit_slice.177: bits[10] = bit_slice(frac_final, start=0, width=10, id=177, pos=[(0,118,87)])
  concat.173: bits[6] = concat(sign_result, literal.172, id=173, pos=[(0,116,9)])
  frac_subnormal: bits[10] = bit_slice(shrl.159, start=0, width=10, id=160, pos=[(0,104,95)])
  literal.166: bits[5] = literal(value=0, id=166, pos=[(0,114,24)])
  is_nan_a: bits[1] = tuple_index(invoke.55, index=1, id=57, pos=[(0,57,19)])
  is_nan_b: bits[1] = tuple_index(invoke.58, index=1, id=60, pos=[(0,58,19)])
  is_inf_a: bits[1] = tuple_index(invoke.55, index=0, id=56, pos=[(0,57,9)])
  is_zero_b: bits[1] = and(eq.67, eq.69, id=70, pos=[(0,60,21)])
  is_inf_a__1: bits[1] = and(eq.141, eq.143, id=144, pos=[(0,99,20)])
  is_inf_b__1: bits[1] = and(eq.146, eq.148, id=149, pos=[(0,100,20)])
  literal.151: bits[8] = literal(value=31, id=151, pos=[(0,101,60)])
  is_zero_a: bits[1] = and(eq.62, eq.64, id=65, pos=[(0,59,21)])
  ule.171: bits[1] = ule(exp_final, literal.170, id=171, pos=[(0,115,14)])
  normalized_result: bits[16] = concat(concat.176, bit_slice.177, id=178, pos=[(0,118,43)])
  concat.174: bits[16] = concat(concat.173, frac_subnormal, id=174, pos=[(0,116,9)])
  concat.167: bits[6] = concat(sign_result, literal.166, id=167, pos=[(0,114,9)])
  literal.168: bits[10] = literal(value=0, id=168, pos=[(0,114,38)])
  literal.162: bits[5] = literal(value=31, id=162, pos=[(0,112,24)])
  or.135: bits[1] = or(is_nan_a, is_nan_b, id=135, pos=[(0,98,24)])
  and.136: bits[1] = and(is_inf_a, is_zero_b, id=136, pos=[(0,98,47)])
  is_inf_b: bits[1] = tuple_index(invoke.58, index=0, id=59, pos=[(0,58,9)])
  or.150: bits[1] = or(is_inf_a__1, is_inf_b__1, id=150, pos=[(0,101,24)])
  uge.152: bits[1] = uge(exp_final, literal.151, id=152, pos=[(0,101,47)])
  is_zero_result: bits[1] = or(is_zero_a, is_zero_b, id=154, pos=[(0,102,25)])
  sel.179: bits[16] = sel(ule.171, cases=[normalized_result, concat.174], id=179, pos=[(0,115,11)])
  concat.169: bits[16] = concat(concat.167, literal.168, id=169, pos=[(0,114,9)])
  concat.163: bits[6] = concat(sign_result, literal.162, id=163, pos=[(0,112,9)])
  literal.164: bits[10] = literal(value=0, id=164, pos=[(0,112,41)])
  or.137: bits[1] = or(or.135, and.136, id=137, pos=[(0,98,24)])
  and.138: bits[1] = and(is_zero_a, is_inf_b, id=138, pos=[(0,98,72)])
  is_inf_result: bits[1] = or(or.150, uge.152, id=153, pos=[(0,101,24)])
  sel.180: bits[16] = sel(is_zero_result, cases=[sel.179, concat.169], id=180, pos=[(0,113,11)])
  concat.165: bits[16] = concat(concat.163, literal.164, id=165, pos=[(0,112,9)])
  is_nan_result: bits[1] = or(or.137, and.138, id=139, pos=[(0,98,24)])
  sel.181: bits[16] = sel(is_inf_result, cases=[sel.180, concat.165], id=181, pos=[(0,111,11)])
  literal.161: bits[16] = literal(value=32256, id=161, pos=[(0,110,8)])
  ret result: bits[16] = sel(is_nan_result, cases=[sel.181, literal.161], id=182, pos=[(0,109,17)])
}

top fn __fp16_mul__fp16_multiplier(a: bits[16] id=183, b: bits[16] id=184) -> bits[16] {
  ret invoke.185: bits[16] = invoke(a, b, to_apply=__fp16_mul__fp16_multiply, id=185, pos=[(0,127,17)])
}
