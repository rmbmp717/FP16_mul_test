package fp16_mul

file_number 0 "fp16_mul.x"

fn __fp16_mul__check_special_values(exp: bits[5] id=1, frac: bits[10] id=2) -> (bits[1], bits[1]) {
  literal.3: bits[5] = literal(value=31, id=3, pos=[(0,37,25)])
  literal.5: bits[10] = literal(value=0, id=5, pos=[(0,37,50)])
  literal.8: bits[5] = literal(value=31, id=8, pos=[(0,38,25)])
  literal.10: bits[10] = literal(value=0, id=10, pos=[(0,38,50)])
  eq.4: bits[1] = eq(exp, literal.3, id=4, pos=[(0,37,18)])
  eq.6: bits[1] = eq(frac, literal.5, id=6, pos=[(0,37,42)])
  eq.9: bits[1] = eq(exp, literal.8, id=9, pos=[(0,38,18)])
  ne.11: bits[1] = ne(frac, literal.10, id=11, pos=[(0,38,42)])
  is_inf: bits[1] = and(eq.4, eq.6, id=7, pos=[(0,37,18)])
  is_nan: bits[1] = and(eq.9, ne.11, id=12, pos=[(0,38,18)])
  ret tuple.13: (bits[1], bits[1]) = tuple(is_inf, is_nan, id=13, pos=[(0,39,4)])
}

fn __fp16_mul__sel__1(cond: bits[1] id=14, a: bits[1] id=15, b: bits[1] id=16) -> bits[1] {
  literal.18: bits[1] = literal(value=1, id=18, pos=[(0,11,15)])
  eq.19: bits[1] = eq(cond, literal.18, id=19, pos=[(0,11,7)])
  N: bits[32] = literal(value=1, id=17, pos=[(0,10,11)])
  ret sel.20: bits[1] = sel(eq.19, cases=[b, a], id=20, pos=[(0,11,4)])
}

fn __fp16_mul__u5_to_u8(x: bits[5] id=21) -> bits[8] {
  literal.22: bits[3] = literal(value=0, id=22, pos=[(0,20,4)])
  ret concat.23: bits[8] = concat(literal.22, x, id=23, pos=[(0,20,4)])
}

fn __fp16_mul__u11_to_u22(x: bits[11] id=24) -> bits[22] {
  literal.25: bits[11] = literal(value=0, id=25, pos=[(0,24,4)])
  ret concat.26: bits[22] = concat(literal.25, x, id=26, pos=[(0,24,4)])
}

fn __fp16_mul__sel__11(cond: bits[1] id=27, a: bits[11] id=28, b: bits[11] id=29) -> bits[11] {
  literal.31: bits[1] = literal(value=1, id=31, pos=[(0,11,15)])
  eq.32: bits[1] = eq(cond, literal.31, id=32, pos=[(0,11,7)])
  N: bits[32] = literal(value=11, id=30, pos=[(0,10,11)])
  ret sel.33: bits[11] = sel(eq.32, cases=[b, a], id=33, pos=[(0,11,4)])
}

fn __fp16_mul__sel__8(cond: bits[1] id=34, a: bits[8] id=35, b: bits[8] id=36) -> bits[8] {
  literal.38: bits[1] = literal(value=1, id=38, pos=[(0,11,15)])
  eq.39: bits[1] = eq(cond, literal.38, id=39, pos=[(0,11,7)])
  N: bits[32] = literal(value=8, id=37, pos=[(0,10,11)])
  ret sel.40: bits[8] = sel(eq.39, cases=[b, a], id=40, pos=[(0,11,4)])
}

fn __fp16_mul__u11_to_u32(x: bits[11] id=41) -> bits[32] {
  literal.42: bits[21] = literal(value=0, id=42, pos=[(0,28,4)])
  ret concat.43: bits[32] = concat(literal.42, x, id=43, pos=[(0,28,4)])
}

fn __fp16_mul__u8_to_u32(x: bits[8] id=44) -> bits[32] {
  literal.45: bits[24] = literal(value=0, id=45, pos=[(0,32,4)])
  ret concat.46: bits[32] = concat(literal.45, x, id=46, pos=[(0,32,4)])
}

fn __fp16_mul__fp16_multiply(a: bits[16] id=47, b: bits[16] id=48) -> bits[16] {
  exp_a: bits[5] = bit_slice(a, start=10, width=5, id=49, pos=[(0,47,17)])
  literal.79: bits[5] = literal(value=0, id=79, pos=[(0,74,33)])
  exp_b: bits[5] = bit_slice(b, start=10, width=5, id=50, pos=[(0,48,17)])
  literal.84: bits[5] = literal(value=0, id=84, pos=[(0,75,33)])
  eq.80: bits[1] = eq(exp_a, literal.79, id=80, pos=[(0,74,24)])
  literal.81: bits[1] = literal(value=0, id=81, pos=[(0,74,44)])
  literal.82: bits[1] = literal(value=1, id=82, pos=[(0,74,55)])
  eq.85: bits[1] = eq(exp_b, literal.84, id=85, pos=[(0,75,24)])
  literal.86: bits[1] = literal(value=0, id=86, pos=[(0,75,44)])
  literal.87: bits[1] = literal(value=1, id=87, pos=[(0,75,55)])
  leading_a: bits[1] = invoke(eq.80, literal.81, literal.82, to_apply=__fp16_mul__sel__1, id=83, pos=[(0,74,23)])
  frac_a_raw: bits[10] = bit_slice(a, start=0, width=10, id=51, pos=[(0,49,32)])
  leading_b: bits[1] = invoke(eq.85, literal.86, literal.87, to_apply=__fp16_mul__sel__1, id=88, pos=[(0,75,23)])
  frac_b_raw: bits[10] = bit_slice(b, start=0, width=10, id=52, pos=[(0,50,32)])
  frac_a: bits[11] = concat(leading_a, frac_a_raw, id=89, pos=[(0,76,17)])
  frac_b: bits[11] = concat(leading_b, frac_b_raw, id=90, pos=[(0,77,17)])
  invoke.99: bits[22] = invoke(frac_a, to_apply=__fp16_mul__u11_to_u22, id=99, pos=[(0,87,30)])
  invoke.100: bits[22] = invoke(frac_b, to_apply=__fp16_mul__u11_to_u22, id=100, pos=[(0,87,51)])
  frac_mult: bits[22] = umul(invoke.99, invoke.100, id=101, pos=[(0,87,30)])
  leading_bit: bits[1] = bit_slice(frac_mult, start=21, width=1, id=103, pos=[(0,94,31)])
  literal.120: bits[1] = literal(value=1, id=120, pos=[(0,99,39)])
  literal.115: bits[1] = literal(value=1, id=115, pos=[(0,98,39)])
  eq.121: bits[1] = eq(leading_bit, literal.120, id=121, pos=[(0,99,24)])
  bit_slice.122: bits[1] = bit_slice(frac_mult, start=9, width=1, id=122, pos=[(0,99,59)])
  bit_slice.123: bits[1] = bit_slice(frac_mult, start=8, width=1, id=123, pos=[(0,99,76)])
  eq.116: bits[1] = eq(leading_bit, literal.115, id=116, pos=[(0,98,24)])
  bit_slice.117: bits[1] = bit_slice(frac_mult, start=10, width=1, id=117, pos=[(0,98,59)])
  bit_slice.118: bits[1] = bit_slice(frac_mult, start=9, width=1, id=118, pos=[(0,98,77)])
  round_bit: bits[1] = invoke(eq.121, bit_slice.122, bit_slice.123, to_apply=__fp16_mul__sel__1, id=124, pos=[(0,99,23)])
  bit_slice.125: bits[8] = bit_slice(frac_mult, start=0, width=8, id=125, pos=[(0,100,30)])
  literal.126: bits[8] = literal(value=0, id=126, pos=[(0,100,39)])
  literal.104: bits[1] = literal(value=1, id=104, pos=[(0,95,43)])
  guard_bit: bits[1] = invoke(eq.116, bit_slice.117, bit_slice.118, to_apply=__fp16_mul__sel__1, id=119, pos=[(0,98,23)])
  not.134: bits[1] = not(round_bit, id=134, pos=[(0,110,39)])
  sticky_bit: bits[1] = ne(bit_slice.125, literal.126, id=127, pos=[(0,100,30)])
  eq.105: bits[1] = eq(leading_bit, literal.104, id=105, pos=[(0,95,28)])
  bit_slice.106: bits[11] = bit_slice(frac_mult, start=11, width=11, id=106, pos=[(0,95,63)])
  bit_slice.107: bits[11] = bit_slice(frac_mult, start=10, width=11, id=107, pos=[(0,95,81)])
  invoke.94: bits[8] = invoke(exp_a, to_apply=__fp16_mul__u5_to_u8, id=94, pos=[(0,86,26)])
  invoke.95: bits[8] = invoke(exp_b, to_apply=__fp16_mul__u5_to_u8, id=95, pos=[(0,86,44)])
  literal.109: bits[1] = literal(value=1, id=109, pos=[(0,96,52)])
  and.135: bits[1] = and(guard_bit, not.134, id=135, pos=[(0,110,27)])
  not.136: bits[1] = not(sticky_bit, id=136, pos=[(0,110,52)])
  frac_adjusted: bits[11] = invoke(eq.105, bit_slice.106, bit_slice.107, to_apply=__fp16_mul__sel__11, id=108, pos=[(0,95,27)])
  add.96: bits[8] = add(invoke.94, invoke.95, id=96, pos=[(0,86,26)])
  literal.97: bits[8] = literal(value=15, id=97, pos=[(0,86,54)])
  eq.110: bits[1] = eq(leading_bit, literal.109, id=110, pos=[(0,96,37)])
  literal.111: bits[8] = literal(value=1, id=111, pos=[(0,96,63)])
  literal.112: bits[8] = literal(value=0, id=112, pos=[(0,96,74)])
  literal.144: bits[11] = literal(value=2047, id=144, pos=[(0,113,56)])
  or.132: bits[1] = or(round_bit, sticky_bit, id=132, pos=[(0,109,40)])
  and.137: bits[1] = and(and.135, not.136, id=137, pos=[(0,110,27)])
  bit_slice.138: bits[1] = bit_slice(frac_adjusted, start=0, width=1, id=138, pos=[(0,110,79)])
  exp_sum: bits[8] = sub(add.96, literal.97, id=98, pos=[(0,86,26)])
  invoke.113: bits[8] = invoke(eq.110, literal.111, literal.112, to_apply=__fp16_mul__sel__8, id=113, pos=[(0,96,36)])
  eq.145: bits[1] = eq(frac_adjusted, literal.144, id=145, pos=[(0,113,39)])
  literal.146: bits[8] = literal(value=1, id=146, pos=[(0,113,72)])
  literal.147: bits[8] = literal(value=0, id=147, pos=[(0,113,83)])
  and.133: bits[1] = and(guard_bit, or.132, id=133, pos=[(0,109,27)])
  and.139: bits[1] = and(and.137, bit_slice.138, id=139, pos=[(0,110,27)])
  literal.141: bits[11] = literal(value=1, id=141, pos=[(0,112,58)])
  exp_adjusted: bits[8] = add(exp_sum, invoke.113, id=114, pos=[(0,96,23)])
  invoke.148: bits[8] = invoke(eq.145, literal.146, literal.147, to_apply=__fp16_mul__sel__8, id=148, pos=[(0,113,38)])
  round_condition: bits[1] = or(and.133, and.139, id=140, pos=[(0,109,27)])
  add.142: bits[11] = add(frac_adjusted, literal.141, id=142, pos=[(0,112,42)])
  literal.175: bits[8] = literal(value=1, id=175, pos=[(0,129,72)])
  exp_final: bits[8] = add(exp_adjusted, invoke.148, id=149, pos=[(0,113,20)])
  frac_final: bits[11] = invoke(round_condition, add.142, frac_adjusted, to_apply=__fp16_mul__sel__11, id=143, pos=[(0,112,24)])
  sub.176: bits[8] = sub(literal.175, exp_final, id=176, pos=[(0,129,72)])
  sign_a: bits[1] = bit_slice(a, start=15, width=1, id=53, pos=[(0,51,27)])
  sign_b: bits[1] = bit_slice(b, start=15, width=1, id=54, pos=[(0,52,27)])
  invoke.174: bits[32] = invoke(frac_final, to_apply=__fp16_mul__u11_to_u32, id=174, pos=[(0,129,46)])
  invoke.177: bits[32] = invoke(sub.176, to_apply=__fp16_mul__u8_to_u32, id=177, pos=[(0,129,71)])
  literal.74: bits[5] = literal(value=0, id=74, pos=[(0,69,30)])
  literal.76: bits[10] = literal(value=0, id=76, pos=[(0,69,58)])
  literal.159: bits[5] = literal(value=31, id=159, pos=[(0,124,29)])
  literal.161: bits[10] = literal(value=0, id=161, pos=[(0,124,60)])
  literal.164: bits[5] = literal(value=31, id=164, pos=[(0,125,29)])
  literal.166: bits[10] = literal(value=0, id=166, pos=[(0,125,60)])
  literal.69: bits[5] = literal(value=0, id=69, pos=[(0,68,30)])
  literal.71: bits[10] = literal(value=0, id=71, pos=[(0,68,58)])
  sign_result: bits[1] = xor(sign_a, sign_b, id=93, pos=[(0,85,22)])
  bit_slice.206: bits[5] = bit_slice(exp_final, start=0, width=5, id=206, pos=[(0,156,67)])
  literal.198: bits[5] = literal(value=0, id=198, pos=[(0,151,24)])
  shrl.178: bits[32] = shrl(invoke.174, invoke.177, id=178, pos=[(0,129,46)])
  invoke.63: (bits[1], bits[1]) = invoke(exp_a, frac_a_raw, to_apply=__fp16_mul__check_special_values, id=63, pos=[(0,66,51)])
  invoke.66: (bits[1], bits[1]) = invoke(exp_b, frac_b_raw, to_apply=__fp16_mul__check_special_values, id=66, pos=[(0,67,51)])
  eq.75: bits[1] = eq(exp_b, literal.74, id=75, pos=[(0,69,21)])
  eq.77: bits[1] = eq(frac_b_raw, literal.76, id=77, pos=[(0,69,44)])
  eq.160: bits[1] = eq(exp_a, literal.159, id=160, pos=[(0,124,20)])
  eq.162: bits[1] = eq(frac_a_raw, literal.161, id=162, pos=[(0,124,46)])
  eq.165: bits[1] = eq(exp_b, literal.164, id=165, pos=[(0,125,20)])
  eq.167: bits[1] = eq(frac_b_raw, literal.166, id=167, pos=[(0,125,46)])
  eq.70: bits[1] = eq(exp_a, literal.69, id=70, pos=[(0,68,21)])
  eq.72: bits[1] = eq(frac_a_raw, literal.71, id=72, pos=[(0,68,44)])
  literal.195: bits[8] = literal(value=0, id=195, pos=[(0,149,27)])
  concat.207: bits[6] = concat(sign_result, bit_slice.206, id=207, pos=[(0,156,43)])
  bit_slice.208: bits[10] = bit_slice(frac_final, start=0, width=10, id=208, pos=[(0,156,87)])
  concat.199: bits[6] = concat(sign_result, literal.198, id=199, pos=[(0,151,9)])
  frac_subnormal: bits[10] = bit_slice(shrl.178, start=0, width=10, id=179, pos=[(0,129,95)])
  literal.191: bits[5] = literal(value=0, id=191, pos=[(0,148,24)])
  is_nan_a: bits[1] = tuple_index(invoke.63, index=1, id=65, pos=[(0,66,19)])
  is_nan_b: bits[1] = tuple_index(invoke.66, index=1, id=68, pos=[(0,67,19)])
  is_inf_a: bits[1] = tuple_index(invoke.63, index=0, id=64, pos=[(0,66,9)])
  is_zero_b: bits[1] = and(eq.75, eq.77, id=78, pos=[(0,69,21)])
  is_inf_a__1: bits[1] = and(eq.160, eq.162, id=163, pos=[(0,124,20)])
  is_inf_b__1: bits[1] = and(eq.165, eq.167, id=168, pos=[(0,125,20)])
  literal.170: bits[8] = literal(value=31, id=170, pos=[(0,126,60)])
  is_zero_a: bits[1] = and(eq.70, eq.72, id=73, pos=[(0,68,21)])
  ule.196: bits[1] = ule(exp_final, literal.195, id=196, pos=[(0,149,14)])
  normalized_result: bits[16] = concat(concat.207, bit_slice.208, id=209, pos=[(0,156,43)])
  concat.200: bits[16] = concat(concat.199, frac_subnormal, id=200, pos=[(0,151,9)])
  concat.192: bits[6] = concat(sign_result, literal.191, id=192, pos=[(0,148,9)])
  literal.193: bits[10] = literal(value=0, id=193, pos=[(0,148,38)])
  literal.186: bits[5] = literal(value=31, id=186, pos=[(0,145,24)])
  or.154: bits[1] = or(is_nan_a, is_nan_b, id=154, pos=[(0,123,24)])
  and.155: bits[1] = and(is_inf_a, is_zero_b, id=155, pos=[(0,123,47)])
  is_inf_b: bits[1] = tuple_index(invoke.66, index=0, id=67, pos=[(0,67,9)])
  or.169: bits[1] = or(is_inf_a__1, is_inf_b__1, id=169, pos=[(0,126,24)])
  uge.171: bits[1] = uge(exp_final, literal.170, id=171, pos=[(0,126,47)])
  is_zero_result: bits[1] = or(is_zero_a, is_zero_b, id=173, pos=[(0,127,25)])
  sel.210: bits[16] = sel(ule.196, cases=[normalized_result, concat.200], id=210, pos=[(0,149,11)])
  concat.194: bits[16] = concat(concat.192, literal.193, id=194, pos=[(0,148,9)])
  concat.187: bits[6] = concat(sign_result, literal.186, id=187, pos=[(0,145,9)])
  literal.188: bits[10] = literal(value=0, id=188, pos=[(0,145,41)])
  or.156: bits[1] = or(or.154, and.155, id=156, pos=[(0,123,24)])
  and.157: bits[1] = and(is_zero_a, is_inf_b, id=157, pos=[(0,123,72)])
  is_inf_result: bits[1] = or(or.169, uge.171, id=172, pos=[(0,126,24)])
  sel.211: bits[16] = sel(is_zero_result, cases=[sel.210, concat.194], id=211, pos=[(0,146,11)])
  concat.189: bits[16] = concat(concat.187, literal.188, id=189, pos=[(0,145,9)])
  is_nan_result: bits[1] = or(or.156, and.157, id=158, pos=[(0,123,24)])
  bit_slice.202: bits[5] = bit_slice(exp_final, start=0, width=5, id=202, pos=[(0,154,24)])
  bit_slice.204: bits[10] = bit_slice(frac_final, start=0, width=10, id=204, pos=[(0,155,25)])
  sel.212: bits[16] = sel(is_inf_result, cases=[sel.211, concat.189], id=212, pos=[(0,143,11)])
  literal.184: bits[16] = literal(value=32256, id=184, pos=[(0,142,8)])
  identity.55: bits[16] = identity(a, id=55, pos=[(0,54,10)])
  identity.56: bits[16] = identity(b, id=56, pos=[(0,55,10)])
  identity.57: bits[5] = identity(exp_a, id=57, pos=[(0,56,10)])
  identity.58: bits[5] = identity(exp_b, id=58, pos=[(0,57,10)])
  identity.59: bits[10] = identity(frac_a_raw, id=59, pos=[(0,58,10)])
  identity.60: bits[10] = identity(frac_b_raw, id=60, pos=[(0,59,10)])
  identity.61: bits[1] = identity(sign_a, id=61, pos=[(0,60,10)])
  identity.62: bits[1] = identity(sign_b, id=62, pos=[(0,61,10)])
  identity.91: bits[11] = identity(frac_a, id=91, pos=[(0,79,10)])
  identity.92: bits[11] = identity(frac_b, id=92, pos=[(0,80,10)])
  identity.102: bits[22] = identity(frac_mult, id=102, pos=[(0,89,10)])
  identity.128: bits[1] = identity(leading_bit, id=128, pos=[(0,102,10)])
  identity.129: bits[11] = identity(frac_adjusted, id=129, pos=[(0,103,10)])
  identity.130: bits[1] = identity(round_bit, id=130, pos=[(0,105,10)])
  identity.131: bits[1] = identity(sticky_bit, id=131, pos=[(0,106,10)])
  identity.150: bits[11] = identity(frac_adjusted, id=150, pos=[(0,115,10)])
  identity.151: bits[1] = identity(round_condition, id=151, pos=[(0,116,10)])
  identity.152: bits[11] = identity(frac_final, id=152, pos=[(0,117,10)])
  identity.153: bits[8] = identity(exp_final, id=153, pos=[(0,118,10)])
  identity.180: bits[1] = identity(is_inf_result, id=180, pos=[(0,131,10)])
  identity.181: bits[1] = identity(is_zero_result, id=181, pos=[(0,132,10)])
  identity.182: bits[10] = identity(frac_subnormal, id=182, pos=[(0,133,10)])
  identity.183: bits[1] = identity(is_nan_result, id=183, pos=[(0,141,14)])
  identity.185: bits[1] = identity(is_inf_result, id=185, pos=[(0,144,14)])
  identity.190: bits[1] = identity(is_zero_result, id=190, pos=[(0,147,14)])
  identity.197: bits[8] = identity(exp_final, id=197, pos=[(0,150,14)])
  identity.201: bits[1] = identity(sign_result, id=201, pos=[(0,153,14)])
  identity.203: bits[5] = identity(bit_slice.202, id=203, pos=[(0,154,14)])
  identity.205: bits[10] = identity(bit_slice.204, id=205, pos=[(0,155,14)])
  ret result: bits[16] = sel(is_nan_result, cases=[sel.212, literal.184], id=213, pos=[(0,140,17)])
}

top fn __fp16_mul__fp16_multiplier(a: bits[16] id=214, b: bits[16] id=215) -> bits[16] {
  ret invoke.216: bits[16] = invoke(a, b, to_apply=__fp16_mul__fp16_multiply, id=216, pos=[(0,165,17)])
}
