package fp16_mul

file_number 0 "fp16_mul.x"

top fn __fp16_mul__fp16_multiplier(a: bits[16] id=259, b: bits[16] id=260) -> bits[16] {
  exp_a: bits[5] = bit_slice(a, start=10, width=5, id=447, pos=[(0,70,17)])
  literal.448: bits[5] = literal(value=0, id=448, pos=[(0,97,33)])
  exp_b: bits[5] = bit_slice(b, start=10, width=5, id=449, pos=[(0,71,17)])
  eq.450: bits[1] = eq(exp_a, literal.448, id=450, pos=[(0,97,24)])
  eq.453: bits[1] = eq(exp_b, literal.448, id=453, pos=[(0,98,24)])
  leading_a: bits[1] = not(eq.450, id=591, pos=[(0,13,4)])
  frac_a_raw: bits[10] = bit_slice(a, start=0, width=10, id=455, pos=[(0,72,22)])
  leading_b: bits[1] = not(eq.453, id=595, pos=[(0,13,4)])
  frac_b_raw: bits[10] = bit_slice(b, start=0, width=10, id=457, pos=[(0,73,22)])
  concat.630: bits[11] = concat(leading_a, frac_a_raw, id=630, pos=[(0,28,4)])
  concat.631: bits[11] = concat(leading_b, frac_b_raw, id=631, pos=[(0,28,4)])
  literal.643: bits[1] = literal(value=0, id=643, pos=[(0,48,4)])
  frac_mult: bits[22] = umul(concat.630, concat.631, id=606, pos=[(0,120,30)])
  concat.633: bits[6] = concat(literal.643, exp_a, id=633, pos=[(0,48,4)])
  concat.635: bits[6] = concat(literal.643, exp_b, id=635, pos=[(0,48,4)])
  leading_bit: bits[1] = bit_slice(frac_mult, start=21, width=1, id=465, pos=[(0,126,31)])
  bit_slice.466: bits[1] = bit_slice(frac_mult, start=8, width=1, id=466, pos=[(0,141,33)])
  bit_slice.467: bits[1] = bit_slice(frac_mult, start=9, width=1, id=467, pos=[(0,140,33)])
  bit_slice.468: bits[8] = bit_slice(frac_mult, start=0, width=8, id=468, pos=[(0,142,30)])
  literal.469: bits[8] = literal(value=0, id=469, pos=[(0,142,39)])
  bit_slice.470: bits[11] = bit_slice(frac_mult, start=10, width=11, id=470, pos=[(0,130,37)])
  bit_slice.471: bits[11] = bit_slice(frac_mult, start=11, width=11, id=471, pos=[(0,129,37)])
  add.609: bits[6] = add(concat.633, concat.635, id=609, pos=[(0,111,27)])
  literal.724: bits[6] = literal(value=0, id=724, pos=[(0,13,4)])
  bit_slice.472: bits[1] = bit_slice(frac_mult, start=10, width=1, id=472, pos=[(0,137,33)])
  round_bit: bits[1] = sel(leading_bit, cases=[bit_slice.466, bit_slice.467], id=473, pos=[(0,13,4)])
  sticky_bit: bits[1] = ne(bit_slice.468, literal.469, id=474, pos=[(0,142,30)])
  frac_adjusted: bits[11] = sel(leading_bit, cases=[bit_slice.470, bit_slice.471], id=475, pos=[(0,13,4)])
  concat.637: bits[7] = concat(literal.643, add.609, id=637, pos=[(0,111,27)])
  concat.731: bits[7] = concat(literal.724, leading_bit, id=731, pos=[(0,13,4)])
  guard_bit: bits[1] = sel(leading_bit, cases=[bit_slice.467, bit_slice.472], id=476, pos=[(0,13,4)])
  or.477: bits[1] = or(round_bit, sticky_bit, id=477, pos=[(0,152,40)])
  not.478: bits[1] = not(round_bit, id=478, pos=[(0,153,39)])
  not.479: bits[1] = not(sticky_bit, id=479, pos=[(0,153,52)])
  bit_slice.480: bits[1] = bit_slice(frac_adjusted, start=0, width=1, id=480, pos=[(0,153,79)])
  add.613: bits[7] = add(concat.637, concat.731, id=613, pos=[(0,165,22)])
  and.481: bits[1] = and(guard_bit, or.477, id=481, pos=[(0,152,27)])
  and.482: bits[1] = and(guard_bit, not.478, not.479, bit_slice.480, id=482, pos=[(0,153,27)])
  literal.483: bits[11] = literal(value=1, id=483, pos=[(0,156,45)])
  concat.664: bits[8] = concat(literal.643, add.613, id=664, pos=[(0,165,22)])
  literal.656: bits[8] = literal(value=241, id=656, pos=[(0,165,22)])
  round_condition: bits[1] = or(and.481, and.482, id=486, pos=[(0,152,27)])
  add.487: bits[11] = add(frac_adjusted, literal.483, id=487, pos=[(0,156,29)])
  literal.657: bits[8] = literal(value=16, id=657, pos=[(0,201,18)])
  add.650: bits[8] = add(concat.664, literal.656, id=650, pos=[(0,165,22)])
  literal.504: bits[21] = literal(value=0, id=504, pos=[(0,203,24)])
  frac_final_pre: bits[11] = sel(round_condition, cases=[frac_adjusted, add.487], id=493, pos=[(0,13,4)])
  sub.654: bits[8] = sub(literal.657, concat.664, id=654, pos=[(0,201,18)])
  bit_slice.661: bits[3] = bit_slice(add.650, start=5, width=3, id=661, pos=[(0,57,5)])
  exp_out_5: bits[5] = bit_slice(add.650, start=0, width=5, id=662, pos=[(0,57,5)])
  bit_slice.659: bits[7] = bit_slice(add.650, start=1, width=7, id=659, pos=[(0,63,27)])
  frac_final_32: bits[32] = concat(literal.504, frac_final_pre, id=515, pos=[(0,203,24)])
  shift_9: bits[9] = sign_ext(sub.654, new_bit_count=9, id=655, pos=[(0,201,18)])
  literal.524: bits[10] = literal(value=0, id=524, pos=[(0,187,64)])
  literal.523: bits[5] = literal(value=31, id=523, pos=[(0,187,33)])
  or_reduce.626: bits[1] = or_reduce(bit_slice.661, id=626, pos=[(0,57,5)])
  and_reduce.628: bits[1] = and_reduce(exp_out_5, id=628, pos=[(0,57,5)])
  or_reduce.526: bits[1] = or_reduce(bit_slice.659, id=526, pos=[(0,63,27)])
  bit_slice.660: bits[1] = bit_slice(add.650, start=0, width=1, id=660, pos=[(0,63,27)])
  frac_subnormal_32: bits[32] = shrl(frac_final_32, shift_9, id=530, pos=[(0,204,28)])
  eq.536: bits[1] = eq(frac_a_raw, literal.524, id=536, pos=[(0,187,50)])
  eq.538: bits[1] = eq(frac_b_raw, literal.524, id=538, pos=[(0,188,50)])
  eq.535: bits[1] = eq(exp_a, literal.523, id=535, pos=[(0,187,24)])
  eq.537: bits[1] = eq(exp_b, literal.523, id=537, pos=[(0,188,24)])
  sign: bits[1] = bit_slice(add.650, start=7, width=1, id=666, pos=[(0,55,20)])
  nor.629: bits[1] = nor(or_reduce.626, and_reduce.628, id=629, pos=[(0,57,5)])
  nor.542: bits[1] = nor(or_reduce.526, bit_slice.660, id=542, pos=[(0,63,27)])
  frac_out_10: bits[10] = bit_slice(frac_final_pre, start=0, width=10, id=545, pos=[(0,233,44)])
  frac_subnormal: bits[10] = bit_slice(frac_subnormal_32, start=0, width=10, id=546, pos=[(0,205,42)])
  is_zero_a: bits[1] = and(eq.450, eq.536, id=558, pos=[(0,91,21)])
  is_zero_b: bits[1] = and(eq.453, eq.538, id=559, pos=[(0,92,21)])
  is_inf_a_chk: bits[1] = and(eq.535, eq.536, id=549, pos=[(0,187,24)])
  is_inf_b_chk: bits[1] = and(eq.537, eq.538, id=550, pos=[(0,188,24)])
  nor.551: bits[1] = nor(sign, nor.629, id=551, pos=[(0,57,5)])
  is_subnormal: bits[1] = or(sign, nor.542, id=552, pos=[(0,63,5)])
  concat.700: bits[15] = concat(exp_out_5, frac_out_10, id=700, pos=[(0,237,9)])
  concat.701: bits[15] = concat(literal.448, frac_subnormal, id=701, pos=[(0,228,9)])
  is_zero_result: bits[1] = or(is_zero_a, is_zero_b, id=569, pos=[(0,194,25)])
  is_inf_result: bits[1] = or(is_inf_a_chk, is_inf_b_chk, nor.551, id=560, pos=[(0,189,24)])
  sel.711: bits[15] = sel(is_subnormal, cases=[concat.700, concat.701], id=711, pos=[(0,225,11)])
  literal.721: bits[15] = literal(value=31744, id=721, pos=[(0,221,11)])
  not.727: bits[1] = not(is_zero_result, id=727, pos=[(0,217,11)])
  not.615: bits[1] = not(eq.535, id=615, pos=[(0,42,18)])
  not.617: bits[1] = not(eq.537, id=617, pos=[(0,42,18)])
  sign_a: bits[1] = bit_slice(a, start=15, width=1, id=528, pos=[(0,74,18)])
  sign_b: bits[1] = bit_slice(b, start=15, width=1, id=529, pos=[(0,75,18)])
  sel.715: bits[15] = sel(is_inf_result, cases=[sel.711, literal.721], id=715, pos=[(0,221,11)])
  sign_ext.728: bits[15] = sign_ext(not.727, new_bit_count=15, id=728, pos=[(0,217,11)])
  is_nan: bits[1] = nor(not.615, eq.536, id=616, pos=[(0,42,18)])
  is_nan__1: bits[1] = nor(not.617, eq.538, id=618, pos=[(0,42,18)])
  and.567: bits[1] = and(is_inf_a_chk, eq.453, eq.538, id=567, pos=[(0,184,47)])
  and.568: bits[1] = and(eq.450, eq.536, is_inf_b_chk, id=568, pos=[(0,184,72)])
  sign_result: bits[1] = xor(sign_a, sign_b, id=543, pos=[(0,108,22)])
  and.729: bits[15] = and(sel.715, sign_ext.728, id=729, pos=[(0,217,11)])
  is_nan_result: bits[1] = or(is_nan, is_nan__1, and.567, and.568, id=576, pos=[(0,184,24)])
  concat.699: bits[16] = concat(sign_result, and.729, id=699, pos=[(0,217,11)])
  literal.578: bits[16] = literal(value=32256, id=578, pos=[(0,216,8)])
  ret result: bits[16] = sel(is_nan_result, cases=[concat.699, literal.578], id=583, pos=[(0,214,17)])
}
