package fp16_mul

file_number 0 "fp16_mul.x"

top fn __fp16_mul__fp16_multiplier(a: bits[16] id=214, b: bits[16] id=215) -> bits[16] {
  exp_a: bits[5] = bit_slice(a, start=10, width=5, id=367, pos=[(0,47,17)])
  literal.368: bits[5] = literal(value=0, id=368, pos=[(0,74,33)])
  exp_b: bits[5] = bit_slice(b, start=10, width=5, id=369, pos=[(0,48,17)])
  eq.370: bits[1] = eq(exp_a, literal.368, id=370, pos=[(0,74,24)])
  eq.373: bits[1] = eq(exp_b, literal.368, id=373, pos=[(0,75,24)])
  leading_a: bits[1] = not(eq.370, id=491, pos=[(0,11,4)])
  frac_a_raw: bits[10] = bit_slice(a, start=0, width=10, id=375, pos=[(0,49,32)])
  leading_b: bits[1] = not(eq.373, id=495, pos=[(0,11,4)])
  frac_b_raw: bits[10] = bit_slice(b, start=0, width=10, id=377, pos=[(0,50,32)])
  concat.540: bits[11] = concat(leading_a, frac_a_raw, id=540, pos=[(0,24,4)])
  concat.541: bits[11] = concat(leading_b, frac_b_raw, id=541, pos=[(0,24,4)])
  frac_mult: bits[22] = umul(concat.540, concat.541, id=509, pos=[(0,87,30)])
  leading_bit: bits[1] = bit_slice(frac_mult, start=21, width=1, id=385, pos=[(0,94,31)])
  bit_slice.386: bits[11] = bit_slice(frac_mult, start=10, width=11, id=386, pos=[(0,95,81)])
  bit_slice.387: bits[11] = bit_slice(frac_mult, start=11, width=11, id=387, pos=[(0,95,63)])
  frac_adjusted: bits[11] = sel(leading_bit, cases=[bit_slice.386, bit_slice.387], id=392, pos=[(0,11,4)])
  literal.393: bits[11] = literal(value=2047, id=393, pos=[(0,113,56)])
  literal.561: bits[1] = literal(value=0, id=561, pos=[(0,20,4)])
  bit_slice.388: bits[1] = bit_slice(frac_mult, start=8, width=1, id=388, pos=[(0,99,76)])
  bit_slice.389: bits[1] = bit_slice(frac_mult, start=9, width=1, id=389, pos=[(0,99,59)])
  bit_slice.390: bits[8] = bit_slice(frac_mult, start=0, width=8, id=390, pos=[(0,100,30)])
  literal.391: bits[8] = literal(value=0, id=391, pos=[(0,100,39)])
  eq.400: bits[1] = eq(frac_adjusted, literal.393, id=400, pos=[(0,113,39)])
  concat.543: bits[6] = concat(literal.561, exp_a, id=543, pos=[(0,20,4)])
  concat.545: bits[6] = concat(literal.561, exp_b, id=545, pos=[(0,20,4)])
  bit_slice.394: bits[1] = bit_slice(frac_mult, start=10, width=1, id=394, pos=[(0,98,59)])
  round_bit: bits[1] = sel(leading_bit, cases=[bit_slice.388, bit_slice.389], id=395, pos=[(0,11,4)])
  sticky_bit: bits[1] = ne(bit_slice.390, literal.391, id=396, pos=[(0,100,30)])
  concat.674: bits[2] = concat(literal.561, leading_bit, id=674, pos=[(0,11,4)])
  concat.675: bits[2] = concat(literal.561, eq.400, id=675, pos=[(0,11,4)])
  add.512: bits[6] = add(concat.543, concat.545, id=512, pos=[(0,86,26)])
  literal.665: bits[6] = literal(value=0, id=665, pos=[(0,11,4)])
  guard_bit: bits[1] = sel(leading_bit, cases=[bit_slice.389, bit_slice.394], id=401, pos=[(0,11,4)])
  or.402: bits[1] = or(round_bit, sticky_bit, id=402, pos=[(0,109,40)])
  not.403: bits[1] = not(round_bit, id=403, pos=[(0,110,39)])
  not.404: bits[1] = not(sticky_bit, id=404, pos=[(0,110,52)])
  bit_slice.405: bits[1] = bit_slice(frac_adjusted, start=0, width=1, id=405, pos=[(0,110,79)])
  add.518: bits[2] = add(concat.674, concat.675, id=518, pos=[(0,86,26)])
  concat.550: bits[7] = concat(literal.561, add.512, id=550, pos=[(0,86,26)])
  concat.676: bits[7] = concat(literal.665, leading_bit, id=676, pos=[(0,11,4)])
  exp_final__5_squeezed: bits[2] = literal(value=1, id=572, pos=[(0,11,4)])
  exp_final__6_squeezed: bits[2] = literal(value=2, id=629, pos=[(0,113,20)])
  and.410: bits[1] = and(guard_bit, or.402, id=410, pos=[(0,109,27)])
  and.411: bits[1] = and(guard_bit, not.403, not.404, bit_slice.405, id=411, pos=[(0,110,27)])
  literal.412: bits[11] = literal(value=1, id=412, pos=[(0,112,58)])
  concat.558: bits[7] = concat(literal.368, add.518, id=558, pos=[(0,86,26)])
  add.522: bits[7] = add(concat.550, concat.676, id=522, pos=[(0,113,20)])
  exp_final__3_squeezed_const_msb_bits: bits[6] = literal(value=60, id=604, pos=[(0,113,20)])
  exp_final__3_squeezed: bits[2] = sel(eq.400, cases=[exp_final__5_squeezed, exp_final__6_squeezed], id=603, pos=[(0,113,20)])
  round_condition: bits[1] = or(and.410, and.411, id=416, pos=[(0,109,27)])
  add.417: bits[11] = add(frac_adjusted, literal.412, id=417, pos=[(0,112,42)])
  add.526: bits[7] = add(concat.550, concat.558, id=526, pos=[(0,86,26)])
  exp_final__2: bits[8] = concat(literal.561, add.522, id=537, pos=[(0,113,20)])
  exp_final__3: bits[8] = concat(exp_final__3_squeezed_const_msb_bits, exp_final__3_squeezed, id=636, pos=[(0,113,20)])
  literal.422: bits[21] = literal(value=0, id=422, pos=[(0,28,4)])
  frac_final: bits[11] = sel(round_condition, cases=[frac_adjusted, add.417], id=423, pos=[(0,11,4)])
  literal.418: bits[8] = literal(value=16, id=418, pos=[(0,129,72)])
  concat.539: bits[8] = concat(literal.561, add.526, id=539, pos=[(0,86,26)])
  literal.439: bits[10] = literal(value=0, id=439, pos=[(0,68,58)])
  exp_final__4: bits[8] = add(exp_final__2, exp_final__3, id=575, pos=[(0,113,20)])
  concat.431: bits[32] = concat(literal.422, frac_final, id=431, pos=[(0,28,4)])
  sub.425: bits[8] = sub(literal.418, concat.539, id=425, pos=[(0,129,72)])
  eq.449: bits[1] = eq(frac_a_raw, literal.439, id=449, pos=[(0,68,44)])
  eq.450: bits[1] = eq(frac_b_raw, literal.439, id=450, pos=[(0,69,44)])
  bit_slice.440: bits[7] = bit_slice(exp_final__4, start=1, width=7, id=440, pos=[(0,149,14)])
  shrl.443: bits[32] = shrl(concat.431, sub.425, id=443, pos=[(0,129,46)])
  is_zero_a: bits[1] = and(eq.370, eq.449, id=462, pos=[(0,68,21)])
  is_zero_b: bits[1] = and(eq.373, eq.450, id=463, pos=[(0,69,21)])
  literal.426: bits[5] = literal(value=31, id=426, pos=[(0,37,25)])
  or_reduce.451: bits[1] = or_reduce(bit_slice.440, id=451, pos=[(0,149,14)])
  bit_slice.452: bits[1] = bit_slice(exp_final__4, start=0, width=1, id=452, pos=[(0,149,14)])
  bit_slice.454: bits[5] = bit_slice(exp_final__4, start=0, width=5, id=454, pos=[(0,156,67)])
  bit_slice.455: bits[10] = bit_slice(frac_final, start=0, width=10, id=455, pos=[(0,156,87)])
  frac_subnormal: bits[10] = bit_slice(shrl.443, start=0, width=10, id=456, pos=[(0,129,95)])
  is_zero_result: bits[1] = or(is_zero_a, is_zero_b, id=473, pos=[(0,127,25)])
  eq.433: bits[1] = eq(exp_a, literal.426, id=433, pos=[(0,37,18)])
  eq.436: bits[1] = eq(exp_b, literal.426, id=436, pos=[(0,37,18)])
  literal.461: bits[8] = literal(value=30, id=461, pos=[(0,126,47)])
  nor.464: bits[1] = nor(or_reduce.451, bit_slice.452, id=464, pos=[(0,149,14)])
  normalized_result_bits_0_width_15: bits[15] = concat(bit_slice.454, bit_slice.455, id=630, pos=[(0,156,43)])
  concat.631: bits[15] = concat(literal.368, frac_subnormal, id=631, pos=[(0,151,9)])
  not.668: bits[1] = not(is_zero_result, id=668, pos=[(0,146,11)])
  is_inf: bits[1] = and(eq.433, eq.449, id=444, pos=[(0,37,18)])
  is_inf__1: bits[1] = and(eq.436, eq.450, id=446, pos=[(0,37,18)])
  ugt.472: bits[1] = ugt(exp_final__4, literal.461, id=472, pos=[(0,126,47)])
  sel.644: bits[15] = sel(nor.464, cases=[normalized_result_bits_0_width_15, concat.631], id=644, pos=[(0,149,11)])
  sign_ext.669: bits[15] = sign_ext(not.668, new_bit_count=15, id=669, pos=[(0,146,11)])
  not.528: bits[1] = not(eq.433, id=528, pos=[(0,38,18)])
  not.530: bits[1] = not(eq.436, id=530, pos=[(0,38,18)])
  sign_a: bits[1] = bit_slice(a, start=15, width=1, id=441, pos=[(0,51,27)])
  sign_b: bits[1] = bit_slice(b, start=15, width=1, id=442, pos=[(0,52,27)])
  is_inf_result: bits[1] = or(is_inf, is_inf__1, ugt.472, id=481, pos=[(0,126,24)])
  and.670: bits[15] = and(sel.644, sign_ext.669, id=670, pos=[(0,146,11)])
  literal.655: bits[15] = literal(value=31744, id=655, pos=[(0,143,11)])
  is_nan: bits[1] = nor(not.528, eq.449, id=529, pos=[(0,38,18)])
  is_nan__1: bits[1] = nor(not.530, eq.450, id=531, pos=[(0,38,18)])
  and.479: bits[1] = and(is_inf, eq.373, eq.450, id=479, pos=[(0,123,47)])
  and.480: bits[1] = and(eq.370, eq.449, is_inf__1, id=480, pos=[(0,123,72)])
  sign_result: bits[1] = xor(sign_a, sign_b, id=453, pos=[(0,85,22)])
  sel.652: bits[15] = sel(is_inf_result, cases=[and.670, literal.655], id=652, pos=[(0,143,11)])
  is_nan_result: bits[1] = or(is_nan, is_nan__1, and.479, and.480, id=484, pos=[(0,123,24)])
  concat.627: bits[16] = concat(sign_result, sel.652, id=627, pos=[(0,143,11)])
  literal.486: bits[16] = literal(value=32256, id=486, pos=[(0,142,8)])
  ret result: bits[16] = sel(is_nan_result, cases=[concat.627, literal.486], id=487, pos=[(0,140,17)])
}
