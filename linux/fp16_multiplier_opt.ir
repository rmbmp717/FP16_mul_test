package fp16_mul

file_number 0 "fp16_mul.x"

top fn __fp16_mul__fp16_multiplier(a: bits[16] id=251, b: bits[16] id=252) -> bits[16] {
  exp_a: bits[5] = bit_slice(a, start=10, width=5, id=426, pos=[(0,76,17)])
  literal.427: bits[5] = literal(value=0, id=427, pos=[(0,103,33)])
  exp_b: bits[5] = bit_slice(b, start=10, width=5, id=428, pos=[(0,77,17)])
  eq.429: bits[1] = eq(exp_a, literal.427, id=429, pos=[(0,103,24)])
  eq.432: bits[1] = eq(exp_b, literal.427, id=432, pos=[(0,104,24)])
  leading_a: bits[1] = not(eq.429, id=565, pos=[(0,11,4)])
  frac_a_raw: bits[10] = bit_slice(a, start=0, width=10, id=434, pos=[(0,78,22)])
  leading_b: bits[1] = not(eq.432, id=569, pos=[(0,11,4)])
  frac_b_raw: bits[10] = bit_slice(b, start=0, width=10, id=436, pos=[(0,79,22)])
  concat.622: bits[11] = concat(leading_a, frac_a_raw, id=622, pos=[(0,26,4)])
  concat.623: bits[11] = concat(leading_b, frac_b_raw, id=623, pos=[(0,26,4)])
  frac_mult: bits[22] = umul(concat.622, concat.623, id=586, pos=[(0,126,30)])
  leading_bit: bits[1] = bit_slice(frac_mult, start=21, width=1, id=444, pos=[(0,132,31)])
  bit_slice.445: bits[1] = bit_slice(frac_mult, start=8, width=1, id=445, pos=[(0,144,76)])
  bit_slice.446: bits[1] = bit_slice(frac_mult, start=9, width=1, id=446, pos=[(0,144,59)])
  bit_slice.447: bits[8] = bit_slice(frac_mult, start=0, width=8, id=447, pos=[(0,145,30)])
  literal.448: bits[8] = literal(value=0, id=448, pos=[(0,145,39)])
  bit_slice.449: bits[11] = bit_slice(frac_mult, start=10, width=11, id=449, pos=[(0,136,37)])
  bit_slice.450: bits[11] = bit_slice(frac_mult, start=11, width=11, id=450, pos=[(0,135,37)])
  bit_slice.451: bits[1] = bit_slice(frac_mult, start=10, width=1, id=451, pos=[(0,143,59)])
  round_bit: bits[1] = sel(leading_bit, cases=[bit_slice.445, bit_slice.446], id=452, pos=[(0,11,4)])
  sticky_bit: bits[1] = ne(bit_slice.447, literal.448, id=453, pos=[(0,145,30)])
  frac_adjusted: bits[11] = sel(leading_bit, cases=[bit_slice.449, bit_slice.450], id=454, pos=[(0,11,4)])
  guard_bit: bits[1] = sel(leading_bit, cases=[bit_slice.446, bit_slice.451], id=455, pos=[(0,11,4)])
  or.456: bits[1] = or(round_bit, sticky_bit, id=456, pos=[(0,156,40)])
  not.457: bits[1] = not(round_bit, id=457, pos=[(0,157,39)])
  not.458: bits[1] = not(sticky_bit, id=458, pos=[(0,157,52)])
  bit_slice.459: bits[1] = bit_slice(frac_adjusted, start=0, width=1, id=459, pos=[(0,157,79)])
  and.460: bits[1] = and(guard_bit, or.456, id=460, pos=[(0,156,27)])
  and.461: bits[1] = and(guard_bit, not.457, not.458, bit_slice.459, id=461, pos=[(0,157,27)])
  literal.578: bits[1] = literal(value=0, id=578, pos=[(0,11,4)])
  literal.752: bits[11] = literal(value=0, id=752, pos=[(0,11,4)])
  round_condition: bits[1] = or(and.460, and.461, id=462, pos=[(0,156,27)])
  frac_adjusted_12: bits[12] = concat(literal.578, frac_adjusted, id=465, pos=[(0,160,27)])
  one_12__1: bits[12] = concat(literal.752, round_condition, id=769, pos=[(0,11,4)])
  frac_no_of_12: bits[12] = add(frac_adjusted_12, one_12__1, id=467, pos=[(0,162,28)])
  concat.625: bits[6] = concat(literal.578, exp_a, id=625, pos=[(0,46,4)])
  concat.627: bits[6] = concat(literal.578, exp_b, id=627, pos=[(0,46,4)])
  cond_of: bits[1] = bit_slice(frac_no_of_12, start=11, width=1, id=470, pos=[(0,165,18)])
  add.589: bits[6] = add(concat.625, concat.627, id=589, pos=[(0,117,27)])
  literal.760: bits[6] = literal(value=0, id=760, pos=[(0,11,4)])
  concat.770: bits[2] = concat(literal.578, leading_bit, id=770, pos=[(0,11,4)])
  concat.635: bits[2] = concat(literal.578, cond_of, id=635, pos=[(0,169,25)])
  concat.629: bits[7] = concat(literal.578, add.589, id=629, pos=[(0,117,27)])
  concat.771: bits[7] = concat(literal.760, leading_bit, id=771, pos=[(0,11,4)])
  concat.675: bits[6] = concat(literal.427, cond_of, id=675, pos=[(0,169,25)])
  literal.667: bits[6] = literal(value=49, id=667, pos=[(0,119,21)])
  add.597: bits[2] = add(concat.770, concat.635, id=597, pos=[(0,117,27)])
  add.593: bits[7] = add(concat.629, concat.771, id=593, pos=[(0,170,22)])
  add.657: bits[6] = add(concat.675, literal.667, id=657, pos=[(0,170,22)])
  concat.639: bits[7] = concat(literal.427, add.597, id=639, pos=[(0,117,27)])
  concat.677: bits[8] = concat(literal.578, add.593, id=677, pos=[(0,170,22)])
  sign_ext.679: bits[8] = sign_ext(add.657, new_bit_count=8, id=679, pos=[(0,170,22)])
  frac_no_of_11: bits[11] = bit_slice(frac_no_of_12, start=0, width=11, id=482, pos=[(0,176,37)])
  frac_of_shifted_11: bits[11] = bit_slice(frac_no_of_12, start=1, width=11, id=483, pos=[(0,174,29)])
  literal.653: bits[2] = literal(value=0, id=653, pos=[(0,11,4)])
  add.601: bits[7] = add(concat.629, concat.639, id=601, pos=[(0,117,27)])
  add.661: bits[8] = add(concat.677, sign_ext.679, id=661, pos=[(0,170,22)])
  literal.486: bits[21] = literal(value=0, id=486, pos=[(0,209,24)])
  frac_final_11: bits[11] = sel(cond_of, cases=[frac_no_of_11, frac_of_shifted_11], id=487, pos=[(0,11,4)])
  literal.668: bits[9] = literal(value=16, id=668, pos=[(0,207,18)])
  concat.616: bits[9] = concat(literal.653, add.601, id=616, pos=[(0,117,27)])
  bit_slice.672: bits[3] = bit_slice(add.661, start=5, width=3, id=672, pos=[(0,57,5)])
  exp_out_5: bits[5] = bit_slice(add.661, start=0, width=5, id=673, pos=[(0,57,5)])
  bit_slice.670: bits[7] = bit_slice(add.661, start=1, width=7, id=670, pos=[(0,66,27)])
  frac_final_32: bits[32] = concat(literal.486, frac_final_11, id=497, pos=[(0,209,24)])
  shift_9: bits[9] = sub(literal.668, concat.616, id=665, pos=[(0,207,18)])
  literal.506: bits[10] = literal(value=0, id=506, pos=[(0,194,64)])
  literal.505: bits[5] = literal(value=31, id=505, pos=[(0,194,33)])
  or_reduce.618: bits[1] = or_reduce(bit_slice.672, id=618, pos=[(0,57,5)])
  and_reduce.620: bits[1] = and_reduce(exp_out_5, id=620, pos=[(0,57,5)])
  or_reduce.508: bits[1] = or_reduce(bit_slice.670, id=508, pos=[(0,66,27)])
  bit_slice.671: bits[1] = bit_slice(add.661, start=0, width=1, id=671, pos=[(0,66,27)])
  frac_subnormal_32: bits[32] = shrl(frac_final_32, shift_9, id=512, pos=[(0,210,28)])
  eq.518: bits[1] = eq(frac_a_raw, literal.506, id=518, pos=[(0,194,50)])
  eq.520: bits[1] = eq(frac_b_raw, literal.506, id=520, pos=[(0,195,50)])
  eq.517: bits[1] = eq(exp_a, literal.505, id=517, pos=[(0,194,24)])
  eq.519: bits[1] = eq(exp_b, literal.505, id=519, pos=[(0,195,24)])
  sign: bits[1] = bit_slice(add.661, start=7, width=1, id=682, pos=[(0,54,20)])
  nor.621: bits[1] = nor(or_reduce.618, and_reduce.620, id=621, pos=[(0,57,5)])
  nor.524: bits[1] = nor(or_reduce.508, bit_slice.671, id=524, pos=[(0,66,27)])
  frac_out_10: bits[10] = bit_slice(frac_final_11, start=0, width=10, id=527, pos=[(0,236,39)])
  frac_subnormal: bits[10] = bit_slice(frac_subnormal_32, start=0, width=10, id=528, pos=[(0,211,42)])
  is_zero_a: bits[1] = and(eq.429, eq.518, id=540, pos=[(0,97,21)])
  is_zero_b: bits[1] = and(eq.432, eq.520, id=541, pos=[(0,98,21)])
  is_inf_a_chk: bits[1] = and(eq.517, eq.518, id=531, pos=[(0,194,24)])
  is_inf_b_chk: bits[1] = and(eq.519, eq.520, id=532, pos=[(0,195,24)])
  nor.533: bits[1] = nor(sign, nor.621, id=533, pos=[(0,57,5)])
  is_subnormal: bits[1] = or(sign, nor.524, id=534, pos=[(0,66,5)])
  concat.726: bits[15] = concat(exp_out_5, frac_out_10, id=726, pos=[(0,240,9)])
  concat.727: bits[15] = concat(literal.427, frac_subnormal, id=727, pos=[(0,231,9)])
  is_zero_result: bits[1] = or(is_zero_a, is_zero_b, id=550, pos=[(0,201,25)])
  is_inf_result: bits[1] = or(is_inf_a_chk, is_inf_b_chk, nor.533, id=542, pos=[(0,196,24)])
  sel.739: bits[15] = sel(is_subnormal, cases=[concat.726, concat.727], id=739, pos=[(0,229,11)])
  literal.749: bits[15] = literal(value=31744, id=749, pos=[(0,226,11)])
  not.763: bits[1] = not(is_zero_result, id=763, pos=[(0,223,11)])
  not.603: bits[1] = not(eq.517, id=603, pos=[(0,40,18)])
  not.605: bits[1] = not(eq.519, id=605, pos=[(0,40,18)])
  sign_a: bits[1] = bit_slice(a, start=15, width=1, id=510, pos=[(0,80,18)])
  sign_b: bits[1] = bit_slice(b, start=15, width=1, id=511, pos=[(0,81,18)])
  sel.743: bits[15] = sel(is_inf_result, cases=[sel.739, literal.749], id=743, pos=[(0,226,11)])
  sign_ext.764: bits[15] = sign_ext(not.763, new_bit_count=15, id=764, pos=[(0,223,11)])
  is_nan: bits[1] = nor(not.603, eq.518, id=604, pos=[(0,40,18)])
  is_nan__1: bits[1] = nor(not.605, eq.520, id=606, pos=[(0,40,18)])
  and.548: bits[1] = and(is_inf_a_chk, eq.432, eq.520, id=548, pos=[(0,191,47)])
  and.549: bits[1] = and(eq.429, eq.518, is_inf_b_chk, id=549, pos=[(0,191,72)])
  sign_result: bits[1] = xor(sign_a, sign_b, id=525, pos=[(0,114,22)])
  and.765: bits[15] = and(sel.743, sign_ext.764, id=765, pos=[(0,223,11)])
  is_nan_result: bits[1] = or(is_nan, is_nan__1, and.548, and.549, id=555, pos=[(0,191,24)])
  concat.725: bits[16] = concat(sign_result, and.765, id=725, pos=[(0,223,11)])
  literal.557: bits[16] = literal(value=32256, id=557, pos=[(0,222,8)])
  ret result: bits[16] = sel(is_nan_result, cases=[concat.725, literal.557], id=560, pos=[(0,220,17)])
}
