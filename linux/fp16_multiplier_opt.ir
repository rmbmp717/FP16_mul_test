package fp16_mul

file_number 0 "fp16_mul.x"

top fn __fp16_mul__fp16_multiplier(a: bits[16] id=183, b: bits[16] id=184) -> bits[16] {
  exp_a: bits[5] = bit_slice(a, start=10, width=5, id=305, pos=[(0,47,17)])
  literal.306: bits[5] = literal(value=0, id=306, pos=[(0,65,33)])
  exp_b: bits[5] = bit_slice(b, start=10, width=5, id=307, pos=[(0,48,17)])
  eq.308: bits[1] = eq(exp_a, literal.306, id=308, pos=[(0,65,24)])
  eq.311: bits[1] = eq(exp_b, literal.306, id=311, pos=[(0,66,24)])
  leading_a: bits[1] = not(eq.308, id=430, pos=[(0,11,4)])
  frac_a_raw: bits[10] = bit_slice(a, start=0, width=10, id=313, pos=[(0,49,32)])
  leading_b: bits[1] = not(eq.311, id=434, pos=[(0,11,4)])
  frac_b_raw: bits[10] = bit_slice(b, start=0, width=10, id=315, pos=[(0,50,32)])
  concat.479: bits[11] = concat(leading_a, frac_a_raw, id=479, pos=[(0,24,4)])
  concat.480: bits[11] = concat(leading_b, frac_b_raw, id=480, pos=[(0,24,4)])
  frac_mult: bits[22] = umul(concat.479, concat.480, id=448, pos=[(0,75,30)])
  leading_bit: bits[1] = bit_slice(frac_mult, start=21, width=1, id=323, pos=[(0,80,40)])
  bit_slice.324: bits[1] = bit_slice(frac_mult, start=8, width=1, id=324, pos=[(0,85,76)])
  bit_slice.325: bits[1] = bit_slice(frac_mult, start=9, width=1, id=325, pos=[(0,85,59)])
  bit_slice.326: bits[9] = bit_slice(frac_mult, start=0, width=9, id=326, pos=[(0,86,30)])
  literal.327: bits[9] = literal(value=0, id=327, pos=[(0,86,39)])
  bit_slice.328: bits[11] = bit_slice(frac_mult, start=10, width=11, id=328, pos=[(0,81,81)])
  bit_slice.329: bits[11] = bit_slice(frac_mult, start=11, width=11, id=329, pos=[(0,81,63)])
  bit_slice.330: bits[1] = bit_slice(frac_mult, start=10, width=1, id=330, pos=[(0,84,59)])
  round_bit: bits[1] = sel(leading_bit, cases=[bit_slice.324, bit_slice.325], id=331, pos=[(0,11,4)])
  sticky_bit: bits[1] = ne(bit_slice.326, literal.327, id=332, pos=[(0,86,30)])
  frac_adjusted: bits[11] = sel(leading_bit, cases=[bit_slice.328, bit_slice.329], id=333, pos=[(0,11,4)])
  guard_bit: bits[1] = sel(leading_bit, cases=[bit_slice.325, bit_slice.330], id=334, pos=[(0,11,4)])
  or.335: bits[1] = or(round_bit, sticky_bit, id=335, pos=[(0,89,40)])
  not.336: bits[1] = not(round_bit, id=336, pos=[(0,90,39)])
  not.337: bits[1] = not(sticky_bit, id=337, pos=[(0,90,52)])
  bit_slice.338: bits[1] = bit_slice(frac_adjusted, start=0, width=1, id=338, pos=[(0,90,79)])
  and.339: bits[1] = and(guard_bit, or.335, id=339, pos=[(0,89,27)])
  and.340: bits[1] = and(guard_bit, not.336, not.337, bit_slice.338, id=340, pos=[(0,90,27)])
  literal.341: bits[11] = literal(value=1, id=341, pos=[(0,92,58)])
  round_condition: bits[1] = or(and.339, and.340, id=342, pos=[(0,89,27)])
  add.343: bits[11] = add(frac_adjusted, literal.341, id=343, pos=[(0,92,42)])
  frac_final: bits[11] = sel(round_condition, cases=[frac_adjusted, add.343], id=344, pos=[(0,11,4)])
  literal.345: bits[11] = literal(value=2047, id=345, pos=[(0,93,53)])
  literal.500: bits[1] = literal(value=0, id=500, pos=[(0,20,4)])
  eq.350: bits[1] = eq(frac_final, literal.345, id=350, pos=[(0,93,39)])
  concat.482: bits[6] = concat(literal.500, exp_a, id=482, pos=[(0,20,4)])
  concat.484: bits[6] = concat(literal.500, exp_b, id=484, pos=[(0,20,4)])
  concat.613: bits[2] = concat(literal.500, leading_bit, id=613, pos=[(0,11,4)])
  concat.614: bits[2] = concat(literal.500, eq.350, id=614, pos=[(0,11,4)])
  add.451: bits[6] = add(concat.482, concat.484, id=451, pos=[(0,74,26)])
  literal.604: bits[6] = literal(value=0, id=604, pos=[(0,11,4)])
  add.457: bits[2] = add(concat.613, concat.614, id=457, pos=[(0,74,26)])
  concat.489: bits[7] = concat(literal.500, add.451, id=489, pos=[(0,74,26)])
  concat.615: bits[7] = concat(literal.604, leading_bit, id=615, pos=[(0,11,4)])
  exp_final__5_squeezed: bits[2] = literal(value=1, id=511, pos=[(0,11,4)])
  exp_final__6_squeezed: bits[2] = literal(value=2, id=568, pos=[(0,93,20)])
  concat.497: bits[7] = concat(literal.306, add.457, id=497, pos=[(0,74,26)])
  add.461: bits[7] = add(concat.489, concat.615, id=461, pos=[(0,93,20)])
  exp_final__3_squeezed_const_msb_bits: bits[6] = literal(value=60, id=543, pos=[(0,93,20)])
  exp_final__3_squeezed: bits[2] = sel(eq.350, cases=[exp_final__5_squeezed, exp_final__6_squeezed], id=542, pos=[(0,93,20)])
  add.465: bits[7] = add(concat.489, concat.497, id=465, pos=[(0,74,26)])
  exp_final__2: bits[8] = concat(literal.500, add.461, id=476, pos=[(0,93,20)])
  exp_final__3: bits[8] = concat(exp_final__3_squeezed_const_msb_bits, exp_final__3_squeezed, id=575, pos=[(0,93,20)])
  literal.362: bits[21] = literal(value=0, id=362, pos=[(0,28,4)])
  literal.358: bits[8] = literal(value=16, id=358, pos=[(0,104,72)])
  concat.478: bits[8] = concat(literal.500, add.465, id=478, pos=[(0,74,26)])
  literal.378: bits[10] = literal(value=0, id=378, pos=[(0,59,58)])
  exp_final__4: bits[8] = add(exp_final__2, exp_final__3, id=514, pos=[(0,93,20)])
  concat.370: bits[32] = concat(literal.362, frac_final, id=370, pos=[(0,28,4)])
  sub.364: bits[8] = sub(literal.358, concat.478, id=364, pos=[(0,104,72)])
  eq.388: bits[1] = eq(frac_a_raw, literal.378, id=388, pos=[(0,59,44)])
  eq.389: bits[1] = eq(frac_b_raw, literal.378, id=389, pos=[(0,60,44)])
  bit_slice.379: bits[7] = bit_slice(exp_final__4, start=1, width=7, id=379, pos=[(0,115,14)])
  shrl.382: bits[32] = shrl(concat.370, sub.364, id=382, pos=[(0,104,46)])
  is_zero_a: bits[1] = and(eq.308, eq.388, id=401, pos=[(0,59,21)])
  is_zero_b: bits[1] = and(eq.311, eq.389, id=402, pos=[(0,60,21)])
  literal.365: bits[5] = literal(value=31, id=365, pos=[(0,37,25)])
  or_reduce.390: bits[1] = or_reduce(bit_slice.379, id=390, pos=[(0,115,14)])
  bit_slice.391: bits[1] = bit_slice(exp_final__4, start=0, width=1, id=391, pos=[(0,115,14)])
  bit_slice.393: bits[5] = bit_slice(exp_final__4, start=0, width=5, id=393, pos=[(0,118,67)])
  bit_slice.394: bits[10] = bit_slice(frac_final, start=0, width=10, id=394, pos=[(0,118,87)])
  frac_subnormal: bits[10] = bit_slice(shrl.382, start=0, width=10, id=395, pos=[(0,104,95)])
  is_zero_result: bits[1] = or(is_zero_a, is_zero_b, id=412, pos=[(0,102,25)])
  eq.372: bits[1] = eq(exp_a, literal.365, id=372, pos=[(0,37,18)])
  eq.375: bits[1] = eq(exp_b, literal.365, id=375, pos=[(0,37,18)])
  literal.400: bits[8] = literal(value=30, id=400, pos=[(0,101,47)])
  nor.403: bits[1] = nor(or_reduce.390, bit_slice.391, id=403, pos=[(0,115,14)])
  normalized_result_bits_0_width_15: bits[15] = concat(bit_slice.393, bit_slice.394, id=569, pos=[(0,118,43)])
  concat.570: bits[15] = concat(literal.306, frac_subnormal, id=570, pos=[(0,116,9)])
  not.607: bits[1] = not(is_zero_result, id=607, pos=[(0,113,11)])
  is_inf: bits[1] = and(eq.372, eq.388, id=383, pos=[(0,37,18)])
  is_inf__1: bits[1] = and(eq.375, eq.389, id=385, pos=[(0,37,18)])
  ugt.411: bits[1] = ugt(exp_final__4, literal.400, id=411, pos=[(0,101,47)])
  sel.583: bits[15] = sel(nor.403, cases=[normalized_result_bits_0_width_15, concat.570], id=583, pos=[(0,115,11)])
  sign_ext.608: bits[15] = sign_ext(not.607, new_bit_count=15, id=608, pos=[(0,113,11)])
  not.467: bits[1] = not(eq.372, id=467, pos=[(0,38,18)])
  not.469: bits[1] = not(eq.375, id=469, pos=[(0,38,18)])
  sign_a: bits[1] = bit_slice(a, start=15, width=1, id=380, pos=[(0,51,27)])
  sign_b: bits[1] = bit_slice(b, start=15, width=1, id=381, pos=[(0,52,27)])
  is_inf_result: bits[1] = or(is_inf, is_inf__1, ugt.411, id=420, pos=[(0,101,24)])
  and.609: bits[15] = and(sel.583, sign_ext.608, id=609, pos=[(0,113,11)])
  literal.594: bits[15] = literal(value=31744, id=594, pos=[(0,111,11)])
  is_nan: bits[1] = nor(not.467, eq.388, id=468, pos=[(0,38,18)])
  is_nan__1: bits[1] = nor(not.469, eq.389, id=470, pos=[(0,38,18)])
  and.418: bits[1] = and(is_inf, eq.311, eq.389, id=418, pos=[(0,98,47)])
  and.419: bits[1] = and(eq.308, eq.388, is_inf__1, id=419, pos=[(0,98,72)])
  sign_result: bits[1] = xor(sign_a, sign_b, id=392, pos=[(0,73,22)])
  sel.591: bits[15] = sel(is_inf_result, cases=[and.609, literal.594], id=591, pos=[(0,111,11)])
  is_nan_result: bits[1] = or(is_nan, is_nan__1, and.418, and.419, id=423, pos=[(0,98,24)])
  concat.566: bits[16] = concat(sign_result, sel.591, id=566, pos=[(0,111,11)])
  literal.425: bits[16] = literal(value=32256, id=425, pos=[(0,110,8)])
  ret result: bits[16] = sel(is_nan_result, cases=[concat.566, literal.425], id=426, pos=[(0,109,17)])
}
